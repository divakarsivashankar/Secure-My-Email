// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-07-08 17:28:43 UTC
//   on: 2016-08-08, 17:19:17 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Gmail API (gmail/v1)
// Generated from:
//   Version: v1
//   Revision: 48
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_GMAIL_API_FILTER_CRITERIA_H_
#define  GOOGLE_GMAIL_API_FILTER_CRITERIA_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_gmail_api {
using namespace googleapis;

/**
 * Message matching criteria.
 *
 * @ingroup DataObject
 */
class FilterCriteria : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static FilterCriteria* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit FilterCriteria(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit FilterCriteria(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~FilterCriteria();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_gmail_api::FilterCriteria</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_gmail_api::FilterCriteria");
  }

  /**
   * Determine if the '<code>excludeChats</code>' attribute was set.
   *
   * @return true if the '<code>excludeChats</code>' attribute was set.
   */
  bool has_exclude_chats() const {
    return Storage().isMember("excludeChats");
  }

  /**
   * Clears the '<code>excludeChats</code>' attribute.
   */
  void clear_exclude_chats() {
    MutableStorage()->removeMember("excludeChats");
  }


  /**
   * Get the value of the '<code>excludeChats</code>' attribute.
   */
  bool get_exclude_chats() const {
    const Json::Value& storage = Storage("excludeChats");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>excludeChats</code>' attribute.
   *
   * Whether the response should exclude chats.
   *
   * @param[in] value The new value.
   */
  void set_exclude_chats(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("excludeChats"));
  }

  /**
   * Determine if the '<code>from</code>' attribute was set.
   *
   * @return true if the '<code>from</code>' attribute was set.
   */
  bool has_from() const {
    return Storage().isMember("from");
  }

  /**
   * Clears the '<code>from</code>' attribute.
   */
  void clear_from() {
    MutableStorage()->removeMember("from");
  }


  /**
   * Get the value of the '<code>from</code>' attribute.
   */
  const StringPiece get_from() const {
    const Json::Value& v = Storage("from");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>from</code>' attribute.
   *
   * The sender's display name or email address.
   *
   * @param[in] value The new value.
   */
  void set_from(const StringPiece& value) {
    *MutableStorage("from") = value.data();
  }

  /**
   * Determine if the '<code>hasAttachment</code>' attribute was set.
   *
   * @return true if the '<code>hasAttachment</code>' attribute was set.
   */
  bool has_has_attachment() const {
    return Storage().isMember("hasAttachment");
  }

  /**
   * Clears the '<code>hasAttachment</code>' attribute.
   */
  void clear_has_attachment() {
    MutableStorage()->removeMember("hasAttachment");
  }


  /**
   * Get the value of the '<code>hasAttachment</code>' attribute.
   */
  bool get_has_attachment() const {
    const Json::Value& storage = Storage("hasAttachment");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>hasAttachment</code>' attribute.
   *
   * Whether the message has any attachment.
   *
   * @param[in] value The new value.
   */
  void set_has_attachment(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("hasAttachment"));
  }

  /**
   * Determine if the '<code>negatedQuery</code>' attribute was set.
   *
   * @return true if the '<code>negatedQuery</code>' attribute was set.
   */
  bool has_negated_query() const {
    return Storage().isMember("negatedQuery");
  }

  /**
   * Clears the '<code>negatedQuery</code>' attribute.
   */
  void clear_negated_query() {
    MutableStorage()->removeMember("negatedQuery");
  }


  /**
   * Get the value of the '<code>negatedQuery</code>' attribute.
   */
  const StringPiece get_negated_query() const {
    const Json::Value& v = Storage("negatedQuery");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>negatedQuery</code>' attribute.
   *
   * Only return messages not matching the specified query. Supports the same
   * query format as the Gmail search box. For example,
   * "from:someuser@example.com rfc822msgid: is:unread".
   *
   * @param[in] value The new value.
   */
  void set_negated_query(const StringPiece& value) {
    *MutableStorage("negatedQuery") = value.data();
  }

  /**
   * Determine if the '<code>query</code>' attribute was set.
   *
   * @return true if the '<code>query</code>' attribute was set.
   */
  bool has_query() const {
    return Storage().isMember("query");
  }

  /**
   * Clears the '<code>query</code>' attribute.
   */
  void clear_query() {
    MutableStorage()->removeMember("query");
  }


  /**
   * Get the value of the '<code>query</code>' attribute.
   */
  const StringPiece get_query() const {
    const Json::Value& v = Storage("query");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>query</code>' attribute.
   *
   * Only return messages matching the specified query. Supports the same query
   * format as the Gmail search box. For example, "from:someuser@example.com
   * rfc822msgid: is:unread".
   *
   * @param[in] value The new value.
   */
  void set_query(const StringPiece& value) {
    *MutableStorage("query") = value.data();
  }

  /**
   * Determine if the '<code>size</code>' attribute was set.
   *
   * @return true if the '<code>size</code>' attribute was set.
   */
  bool has_size() const {
    return Storage().isMember("size");
  }

  /**
   * Clears the '<code>size</code>' attribute.
   */
  void clear_size() {
    MutableStorage()->removeMember("size");
  }


  /**
   * Get the value of the '<code>size</code>' attribute.
   */
  int32 get_size() const {
    const Json::Value& storage = Storage("size");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>size</code>' attribute.
   *
   * The size of the entire RFC822 message in bytes, including all headers and
   * attachments.
   *
   * @param[in] value The new value.
   */
  void set_size(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("size"));
  }

  /**
   * Determine if the '<code>sizeComparison</code>' attribute was set.
   *
   * @return true if the '<code>sizeComparison</code>' attribute was set.
   */
  bool has_size_comparison() const {
    return Storage().isMember("sizeComparison");
  }

  /**
   * Clears the '<code>sizeComparison</code>' attribute.
   */
  void clear_size_comparison() {
    MutableStorage()->removeMember("sizeComparison");
  }


  /**
   * Get the value of the '<code>sizeComparison</code>' attribute.
   */
  const StringPiece get_size_comparison() const {
    const Json::Value& v = Storage("sizeComparison");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sizeComparison</code>' attribute.
   *
   * How the message size in bytes should be in relation to the size field.
   *
   * @param[in] value The new value.
   */
  void set_size_comparison(const StringPiece& value) {
    *MutableStorage("sizeComparison") = value.data();
  }

  /**
   * Determine if the '<code>subject</code>' attribute was set.
   *
   * @return true if the '<code>subject</code>' attribute was set.
   */
  bool has_subject() const {
    return Storage().isMember("subject");
  }

  /**
   * Clears the '<code>subject</code>' attribute.
   */
  void clear_subject() {
    MutableStorage()->removeMember("subject");
  }


  /**
   * Get the value of the '<code>subject</code>' attribute.
   */
  const StringPiece get_subject() const {
    const Json::Value& v = Storage("subject");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>subject</code>' attribute.
   *
   * Case-insensitive phrase found in the message's subject. Trailing and
   * leading whitespace are be trimmed and adjacent spaces are collapsed.
   *
   * @param[in] value The new value.
   */
  void set_subject(const StringPiece& value) {
    *MutableStorage("subject") = value.data();
  }

  /**
   * Determine if the '<code>to</code>' attribute was set.
   *
   * @return true if the '<code>to</code>' attribute was set.
   */
  bool has_to() const {
    return Storage().isMember("to");
  }

  /**
   * Clears the '<code>to</code>' attribute.
   */
  void clear_to() {
    MutableStorage()->removeMember("to");
  }


  /**
   * Get the value of the '<code>to</code>' attribute.
   */
  const StringPiece get_to() const {
    const Json::Value& v = Storage("to");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>to</code>' attribute.
   *
   * The recipient's display name or email address. Includes recipients in the
   * "to", "cc", and "bcc" header fields. You can use simply the local part of
   * the email address. For example, "example" and "example@" both match
   * "example@gmail.com". This field is case-insensitive.
   *
   * @param[in] value The new value.
   */
  void set_to(const StringPiece& value) {
    *MutableStorage("to") = value.data();
  }

 private:
  void operator=(const FilterCriteria&);
};  // FilterCriteria
}  // namespace google_gmail_api
#endif  // GOOGLE_GMAIL_API_FILTER_CRITERIA_H_
