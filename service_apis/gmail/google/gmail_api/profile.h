// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-07-08 17:28:43 UTC
//   on: 2016-08-08, 17:19:17 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Gmail API (gmail/v1)
// Generated from:
//   Version: v1
//   Revision: 48
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_GMAIL_API_PROFILE_H_
#define  GOOGLE_GMAIL_API_PROFILE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_gmail_api {
using namespace googleapis;

/**
 * Profile for a Gmail user.
 *
 * @ingroup DataObject
 */
class Profile : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static Profile* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Profile(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit Profile(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~Profile();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_gmail_api::Profile</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_gmail_api::Profile");
  }

  /**
   * Determine if the '<code>emailAddress</code>' attribute was set.
   *
   * @return true if the '<code>emailAddress</code>' attribute was set.
   */
  bool has_email_address() const {
    return Storage().isMember("emailAddress");
  }

  /**
   * Clears the '<code>emailAddress</code>' attribute.
   */
  void clear_email_address() {
    MutableStorage()->removeMember("emailAddress");
  }


  /**
   * Get the value of the '<code>emailAddress</code>' attribute.
   */
  const StringPiece get_email_address() const {
    const Json::Value& v = Storage("emailAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>emailAddress</code>' attribute.
   *
   * The user's email address.
   *
   * @param[in] value The new value.
   */
  void set_email_address(const StringPiece& value) {
    *MutableStorage("emailAddress") = value.data();
  }

  /**
   * Determine if the '<code>historyId</code>' attribute was set.
   *
   * @return true if the '<code>historyId</code>' attribute was set.
   */
  bool has_history_id() const {
    return Storage().isMember("historyId");
  }

  /**
   * Clears the '<code>historyId</code>' attribute.
   */
  void clear_history_id() {
    MutableStorage()->removeMember("historyId");
  }


  /**
   * Get the value of the '<code>historyId</code>' attribute.
   */
  uint64 get_history_id() const {
    const Json::Value& storage = Storage("historyId");
    return client::JsonValueToCppValueHelper<uint64 >(storage);
  }

  /**
   * Change the '<code>historyId</code>' attribute.
   *
   * The ID of the mailbox's current history record.
   *
   * @param[in] value The new value.
   */
  void set_history_id(uint64 value) {
    client::SetJsonValueFromCppValueHelper<uint64 >(
      value, MutableStorage("historyId"));
  }

  /**
   * Determine if the '<code>messagesTotal</code>' attribute was set.
   *
   * @return true if the '<code>messagesTotal</code>' attribute was set.
   */
  bool has_messages_total() const {
    return Storage().isMember("messagesTotal");
  }

  /**
   * Clears the '<code>messagesTotal</code>' attribute.
   */
  void clear_messages_total() {
    MutableStorage()->removeMember("messagesTotal");
  }


  /**
   * Get the value of the '<code>messagesTotal</code>' attribute.
   */
  int32 get_messages_total() const {
    const Json::Value& storage = Storage("messagesTotal");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>messagesTotal</code>' attribute.
   *
   * The total number of messages in the mailbox.
   *
   * @param[in] value The new value.
   */
  void set_messages_total(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("messagesTotal"));
  }

  /**
   * Determine if the '<code>threadsTotal</code>' attribute was set.
   *
   * @return true if the '<code>threadsTotal</code>' attribute was set.
   */
  bool has_threads_total() const {
    return Storage().isMember("threadsTotal");
  }

  /**
   * Clears the '<code>threadsTotal</code>' attribute.
   */
  void clear_threads_total() {
    MutableStorage()->removeMember("threadsTotal");
  }


  /**
   * Get the value of the '<code>threadsTotal</code>' attribute.
   */
  int32 get_threads_total() const {
    const Json::Value& storage = Storage("threadsTotal");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>threadsTotal</code>' attribute.
   *
   * The total number of threads in the mailbox.
   *
   * @param[in] value The new value.
   */
  void set_threads_total(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("threadsTotal"));
  }

 private:
  void operator=(const Profile&);
};  // Profile
}  // namespace google_gmail_api
#endif  // GOOGLE_GMAIL_API_PROFILE_H_
