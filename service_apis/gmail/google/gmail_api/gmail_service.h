// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-07-08 17:28:43 UTC
//   on: 2016-08-08, 17:19:17 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#ifndef  GOOGLE_GMAIL_API_GMAIL_SERVICE_H_
#define  GOOGLE_GMAIL_API_GMAIL_SERVICE_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"
#include "googleapis/client/util/uri_template.h"

#include "google/gmail_api/auto_forwarding.h"
#include "google/gmail_api/batch_delete_messages_request.h"
#include "google/gmail_api/draft.h"
#include "google/gmail_api/filter.h"
#include "google/gmail_api/forwarding_address.h"
#include "google/gmail_api/imap_settings.h"
#include "google/gmail_api/label.h"
#include "google/gmail_api/list_drafts_response.h"
#include "google/gmail_api/list_filters_response.h"
#include "google/gmail_api/list_forwarding_addresses_response.h"
#include "google/gmail_api/list_history_response.h"
#include "google/gmail_api/list_labels_response.h"
#include "google/gmail_api/list_messages_response.h"
#include "google/gmail_api/list_send_as_response.h"
#include "google/gmail_api/list_threads_response.h"
#include "google/gmail_api/message.h"
#include "google/gmail_api/message_part_body.h"
#include "google/gmail_api/modify_message_request.h"
#include "google/gmail_api/modify_thread_request.h"
#include "google/gmail_api/pop_settings.h"
#include "google/gmail_api/profile.h"
#include "google/gmail_api/send_as.h"
#include "google/gmail_api/thread.h"
#include "google/gmail_api/vacation_settings.h"
#include "google/gmail_api/watch_request.h"
#include "google/gmail_api/watch_response.h"


namespace google_gmail_api {
using namespace googleapis;
/**
 * \mainpage
 *   Gmail API Version v1
 *
 * \section ApiInfo API Version Information
 *    <table>
 *      <tr><th>API
 *          <td><a href='https://developers.google.com/gmail/api/'>Gmail API</a>
 *      <tr><th>API Version<td>v1
 *      <tr><th>API Rev<td>48
 *      <tr><th>API Docs
 *          <td><a href='https://developers.google.com/gmail/api/'>
 *              https://developers.google.com/gmail/api/</a>
 *      <tr><th>Discovery Name<td>gmail
 *      <tr><th>Generated At<td>2016-08-08 17:19:17 UTC
 *      <tr><th>C++ Generator<td>google-apis-code-generator
 *      <tr><th>Generator Version
 *          <td>1.5.1 / c++=0.1.4
 *      <tr><th>Generator Build<td>2016-07-08 17:28:43 UTC
 *    </table>
 *
 * \section ForMoreInfo For More Information
 *
 * The complete API documentation for using Gmail API can be found at
 * <a href='https://developers.google.com/gmail/api/'>https://developers.google.com/gmail/api/</a>.
 *
 * For more information about the Google APIs Client Library for C++, see
 * <a href='https://developers.google.com/api-client-library/cpp/start/get_started'>
 * https://developers.google.com/api-client-library/cpp/start/get_started</a>
 */
class GmailService;

/**
 * Implements a common base method for all methods within the GmailService.
 *
 * This class defines all the attributes common across all methods.
 * It does not pertain to any specific service API so is not normally
 * explicitly instantiated.
 */
class GmailServiceBaseRequest
      : public client::ClientServiceRequest {
 public:
  /**
   * Standard constructor.
   *
   * @param[in] service  The service instance to send to when executed.
   *        In practice this will be supplied internally by the service
   *        when it acts as a method factory.
   *
   * @param[in] credential  If not NULL then the credential to authorize with.
   *        In practice this is supplied by the user code that is creating
   *        the method instance.
   *
   * @param[in] method  The HTTP method to use for the underlying HTTP request.
   *        In practice this is specified by the particular API endpoint and
   *        supplied internally by the derived class for that endpoint.
   *
   * @param[in] uri_template  The <a href='http://tools.ietf.org/html/rfc6570'>
   *        RFC 6570 URI Template</a> specifying the url to invoke
   *        The parameters in the template should be resolvable attributes.
   *        In practice this parameter is supplied internally by the derived
   *        class for the endpoint.
   */
  GmailServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template);

  /**
   * Standard destructor.
   */
  virtual ~GmailServiceBaseRequest();


  /**
   * Clears the '<code>alt</code>' attribute so it is no longer set.
   */
  void clear_alt() {
    _have_alt_ = false;
    client::ClearCppValueHelper(&alt_);
  }


  /**
   * Gets the optional '<code>alt</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_alt() const { return alt_; }

  /**
   * Gets a modifiable pointer to the optional <code>alt</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_alt() {
    _have_alt_ = true;
    return &alt_;
  }


  /**
   * Sets the '<code>alt</code>' attribute.
   *
   * @param[in] value Data format for the response.
   */
  void set_alt(const string& value) {
    _have_alt_ = true;
    alt_ = value;
  }



  /**
   * Clears the '<code>fields</code>' attribute so it is no longer set.
   */
  void clear_fields() {
    _have_fields_ = false;
    client::ClearCppValueHelper(&fields_);
  }


  /**
   * Gets the optional '<code>fields</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_fields() const { return fields_; }

  /**
   * Gets a modifiable pointer to the optional <code>fields</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_fields() {
    _have_fields_ = true;
    return &fields_;
  }


  /**
   * Sets the '<code>fields</code>' attribute.
   *
   * @param[in] value Selector specifying which fields to include in a partial
   * response.
   */
  void set_fields(const string& value) {
    _have_fields_ = true;
    fields_ = value;
  }



  /**
   * Clears the '<code>key</code>' attribute so it is no longer set.
   */
  void clear_key() {
    _have_key_ = false;
    client::ClearCppValueHelper(&key_);
  }


  /**
   * Gets the optional '<code>key</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_key() const { return key_; }

  /**
   * Gets a modifiable pointer to the optional <code>key</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_key() {
    _have_key_ = true;
    return &key_;
  }


  /**
   * Sets the '<code>key</code>' attribute.
   *
   * @param[in] value API key. Your API key identifies your project and provides
   * you with API access, quota, and reports. Required unless you provide an
   * OAuth 2.0 token.
   */
  void set_key(const string& value) {
    _have_key_ = true;
    key_ = value;
  }



  /**
   * Clears the '<code>oauth_token</code>' attribute so it is no longer set.
   */
  void clear_oauth_token() {
    _have_oauth_token_ = false;
    client::ClearCppValueHelper(&oauth_token_);
  }


  /**
   * Gets the optional '<code>oauth_token</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_oauth_token() const { return oauth_token_; }

  /**
   * Gets a modifiable pointer to the optional <code>oauth_token</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_oauthToken() {
    _have_oauth_token_ = true;
    return &oauth_token_;
  }


  /**
   * Sets the '<code>oauth_token</code>' attribute.
   *
   * @param[in] value OAuth 2.0 token for the current user.
   */
  void set_oauth_token(const string& value) {
    _have_oauth_token_ = true;
    oauth_token_ = value;
  }



  /**
   * Clears the '<code>prettyPrint</code>' attribute so it is no longer set.
   */
  void clear_pretty_print() {
    _have_pretty_print_ = false;
    client::ClearCppValueHelper(&pretty_print_);
  }


  /**
   * Gets the optional '<code>prettyPrint</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  bool get_pretty_print() const { return pretty_print_; }

  /**
   * Sets the '<code>prettyPrint</code>' attribute.
   *
   * @param[in] value Returns response with indentations and line breaks.
   */
  void set_pretty_print(bool value) {
    _have_pretty_print_ = true;
    pretty_print_ = value;
  }

  /**
   * Clears the '<code>quotaUser</code>' attribute so it is no longer set.
   */
  void clear_quota_user() {
    _have_quota_user_ = false;
    client::ClearCppValueHelper(&quota_user_);
  }


  /**
   * Gets the optional '<code>quotaUser</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_quota_user() const { return quota_user_; }

  /**
   * Gets a modifiable pointer to the optional <code>quotaUser</code>'
   * attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_quotaUser() {
    _have_quota_user_ = true;
    return &quota_user_;
  }


  /**
   * Sets the '<code>quotaUser</code>' attribute.
   *
   * @param[in] value Available to use for quota purposes for server-side
   * applications. Can be any arbitrary string assigned to a user, but should
   * not exceed 40 characters. Overrides userIp if both are provided.
   */
  void set_quota_user(const string& value) {
    _have_quota_user_ = true;
    quota_user_ = value;
  }



  /**
   * Clears the '<code>userIp</code>' attribute so it is no longer set.
   */
  void clear_user_ip() {
    _have_user_ip_ = false;
    client::ClearCppValueHelper(&user_ip_);
  }


  /**
   * Gets the optional '<code>userIp</code>' attribute.
   *
   * If the value is not set then the default value will be returned.
   */
  const string& get_user_ip() const { return user_ip_; }

  /**
   * Gets a modifiable pointer to the optional <code>userIp</code>' attribute.
   *
   * @return  The value can be set by dereferencing the pointer.
   */
  string* mutable_userIp() {
    _have_user_ip_ = true;
    return &user_ip_;
  }


  /**
   * Sets the '<code>userIp</code>' attribute.
   *
   * @param[in] value IP address of the site where the request originates. Use
   * this if you want to enforce per-user limits.
   */
  void set_user_ip(const string& value) {
    _have_user_ip_ = true;
    user_ip_ = value;
  }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the
   * URI supplied to the constructor.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
      const StringPiece& variable_name,
      const client::UriTemplateConfig& config,
      string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


 protected:
  /**
   * Prepares the method's HTTP request to send body content as JSON.
   *
   * Only to be used for method constructors.
   */
  void AddJsonContentToRequest(const client::JsonCppData *content);

 private:
  string alt_;
  string fields_;
  string key_;
  string oauth_token_;
  bool pretty_print_;
  string quota_user_;
  string user_ip_;
  bool _have_alt_ : 1;
  bool _have_fields_ : 1;
  bool _have_key_ : 1;
  bool _have_oauth_token_ : 1;
  bool _have_pretty_print_ : 1;
  bool _have_quota_user_ : 1;
  bool _have_user_ip_ : 1;

  DISALLOW_COPY_AND_ASSIGN(GmailServiceBaseRequest);
};



/**
 * Implements the getProfile method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_GetProfileMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_GetProfileMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_GetProfileMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Profile* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_GetProfileMethod);
};

/**
 * Implements the stop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_StopMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_StopMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_StopMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_StopMethod);
};

/**
 * Implements the watch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_WatchMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _content_ The data object to watch.
   */
  UsersResource_WatchMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const WatchRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_WatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      WatchResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_WatchMethod);
};




/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_DraftsResource_CreateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   *
   * @param[in] _content_ The data object to create.
   */
  UsersResource_DraftsResource_CreateMethod(
        const GmailService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _metadata_ The metadata object to create. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to create. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  UsersResource_DraftsResource_CreateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Draft* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_DraftsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Draft* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_DraftsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_DraftsResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the draft to delete.
   */
  UsersResource_DraftsResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_DraftsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_DraftsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_DraftsResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the draft to retrieve.
   */
  UsersResource_DraftsResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_DraftsResource_GetMethod();


    /**
     * Clears the '<code>format</code>' attribute so it is no longer set.
     */
    void clear_format() {
      _have_format_ = false;
      client::ClearCppValueHelper(&format_);
    }


    /**
     * Gets the optional '<code>format</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_format() const { return format_; }

    /**
     * Gets a modifiable pointer to the optional <code>format</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_format() {
      _have_format_ = true;
      return &format_;
    }


    /**
     * Sets the '<code>format</code>' attribute.
     *
     * @param[in] value The format to return the draft in.
     */
    void set_format(const string& value) {
      _have_format_ = true;
      format_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Draft* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  string format_;
  bool _have_format_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_DraftsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_DraftsResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_DraftsResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_DraftsResource_ListMethod();


    /**
     * Clears the '<code>includeSpamTrash</code>' attribute so it is no longer
     * set.
     */
    void clear_include_spam_trash() {
      _have_include_spam_trash_ = false;
      client::ClearCppValueHelper(&include_spam_trash_);
    }


    /**
     * Gets the optional '<code>includeSpamTrash</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_spam_trash() const { return include_spam_trash_; }

    /**
     * Sets the '<code>includeSpamTrash</code>' attribute.
     *
     * @param[in] value Include drafts from SPAM and TRASH in the results.
     */
    void set_include_spam_trash(bool value) {
      _have_include_spam_trash_ = true;
      include_spam_trash_ = value;
    }

    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of drafts to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token to retrieve a specific page of results in the
     * list.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Only return draft messages matching the specified query.
     * Supports the same query format as the Gmail search box. For example,
     * "from:someuser@example.com rfc822msgid: is:unread".
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListDraftsResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  bool include_spam_trash_;
  uint32 max_results_;
  string page_token_;
  string q_;
  bool _have_include_spam_trash_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_q_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_DraftsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            UsersResource_DraftsResource_ListMethod,
            ListDraftsResponse>
        UsersResource_DraftsResource_ListMethodPager;

/**
 * Implements the send method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_DraftsResource_SendMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   *
   * @param[in] _content_ The data object to send.
   */
  UsersResource_DraftsResource_SendMethod(
        const GmailService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _metadata_ The metadata object to send. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to send. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  UsersResource_DraftsResource_SendMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Draft* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_DraftsResource_SendMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_DraftsResource_SendMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_DraftsResource_UpdateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   *
   * @param[in] id The ID of the draft to update.
   *
   * @param[in] _content_ The data object to update.
   */
  UsersResource_DraftsResource_UpdateMethod(
        const GmailService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id,
        const StringPiece& id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the draft to update.
   * @param[in] _metadata_ The metadata object to update. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to update. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  UsersResource_DraftsResource_UpdateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id,
      const Draft* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_DraftsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Draft* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_DraftsResource_UpdateMethod);
};


/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_HistoryResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_HistoryResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_HistoryResource_ListMethod();


    /**
     * Clears the '<code>labelId</code>' attribute so it is no longer set.
     */
    void clear_label_id() {
      _have_label_id_ = false;
      client::ClearCppValueHelper(&label_id_);
    }


    /**
     * Gets the optional '<code>labelId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_label_id() const { return label_id_; }

    /**
     * Gets a modifiable pointer to the optional <code>labelId</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_labelId() {
      _have_label_id_ = true;
      return &label_id_;
    }


    /**
     * Sets the '<code>labelId</code>' attribute.
     *
     * @param[in] value Only return messages with a label matching the ID.
     */
    void set_label_id(const string& value) {
      _have_label_id_ = true;
      label_id_ = value;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value The maximum number of history records to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token to retrieve a specific page of results in the
     * list.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>startHistoryId</code>' attribute so it is no longer
     * set.
     */
    void clear_start_history_id() {
      _have_start_history_id_ = false;
      client::ClearCppValueHelper(&start_history_id_);
    }


    /**
     * Gets the optional '<code>startHistoryId</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint64 get_start_history_id() const { return start_history_id_; }

    /**
     * Sets the '<code>startHistoryId</code>' attribute.
     *
     * @param[in] value Required. Returns history records after the specified
     * startHistoryId. The supplied startHistoryId should be obtained from the
     * historyId of a message, thread, or previous list response. History IDs
     * increase chronologically but are not contiguous with random gaps in
     * between valid IDs. Supplying an invalid or out of date startHistoryId
     * typically returns an HTTP 404 error code. A historyId is typically valid
     * for at least a week, but in some rare circumstances may be valid for only
     * a few hours. If you receive an HTTP 404 error response, your application
     * should perform a full sync. If you receive no nextPageToken in the
     * response, there are no updates to retrieve and you can store the returned
     * historyId for a future request.
     */
    void set_start_history_id(uint64 value) {
      _have_start_history_id_ = true;
      start_history_id_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListHistoryResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string label_id_;
  uint32 max_results_;
  string page_token_;
  uint64 start_history_id_;
  bool _have_label_id_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_start_history_id_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_HistoryResource_ListMethod);
};

typedef client::ServiceRequestPager<
            UsersResource_HistoryResource_ListMethod,
            ListHistoryResponse>
        UsersResource_HistoryResource_ListMethodPager;


/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.labels
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_LabelsResource_CreateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _content_ The data object to create.
   */
  UsersResource_LabelsResource_CreateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Label& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_LabelsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Label* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_LabelsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.labels
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_LabelsResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the label to delete.
   */
  UsersResource_LabelsResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_LabelsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_LabelsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.labels
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_LabelsResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the label to retrieve.
   */
  UsersResource_LabelsResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_LabelsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Label* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_LabelsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.labels
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_LabelsResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_LabelsResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_LabelsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListLabelsResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_LabelsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.labels
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_LabelsResource_PatchMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the label to update.
   * @param[in] _content_ The data object to patch.
   */
  UsersResource_LabelsResource_PatchMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id,
      const Label& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_LabelsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Label* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_LabelsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.labels
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_LabelsResource_UpdateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the label to update.
   * @param[in] _content_ The data object to update.
   */
  UsersResource_LabelsResource_UpdateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id,
      const Label& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_LabelsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Label* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_LabelsResource_UpdateMethod);
};


/**
 * Implements the batchDelete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 */
class UsersResource_MessagesResource_BatchDeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _content_ The data object to batchDelete.
   */
  UsersResource_MessagesResource_BatchDeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const BatchDeleteMessagesRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_BatchDeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_BatchDeleteMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 */
class UsersResource_MessagesResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the message to delete.
   */
  UsersResource_MessagesResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_MessagesResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the message to retrieve.
   */
  UsersResource_MessagesResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_GetMethod();


    /**
     * Clears the '<code>format</code>' attribute so it is no longer set.
     */
    void clear_format() {
      _have_format_ = false;
      client::ClearCppValueHelper(&format_);
    }


    /**
     * Gets the optional '<code>format</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_format() const { return format_; }

    /**
     * Gets a modifiable pointer to the optional <code>format</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_format() {
      _have_format_ = true;
      return &format_;
    }


    /**
     * Sets the '<code>format</code>' attribute.
     *
     * @param[in] value The format to return the message in.
     */
    void set_format(const string& value) {
      _have_format_ = true;
      format_ = value;
    }



    /**
     * Clears the '<code>metadataHeaders</code>' attribute so it is no longer
     * set.
     */
    void clear_metadata_headers() {
      _have_metadata_headers_ = false;
      client::ClearCppValueHelper(&metadata_headers_);
    }


    /**
     * Gets the optional '<code>metadataHeaders</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const client::JsonCppArray<string >& get_metadata_headers() const { return metadata_headers_; }

    /**
     * Gets a modifiable pointer to the optional <code>metadataHeaders</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    client::JsonCppArray<string >* mutable_metadataHeaders() {
      _have_metadata_headers_ = true;
      return &metadata_headers_;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  string format_;
  client::JsonCppCapsule< client::JsonCppArray<string > > metadata_headers_;
  bool _have_format_ : 1;
  bool _have_metadata_headers_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_GetMethod);
};

/**
 * Implements the import method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.insert
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_MessagesResource_ImportMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   *
   * @param[in] _content_ The data object to import.
   */
  UsersResource_MessagesResource_ImportMethod(
        const GmailService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _metadata_ The metadata object to import. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to import. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  UsersResource_MessagesResource_ImportMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Message* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_ImportMethod();


    /**
     * Clears the '<code>deleted</code>' attribute so it is no longer set.
     */
    void clear_deleted() {
      _have_deleted_ = false;
      client::ClearCppValueHelper(&deleted_);
    }


    /**
     * Gets the optional '<code>deleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_deleted() const { return deleted_; }

    /**
     * Sets the '<code>deleted</code>' attribute.
     *
     * @param[in] value Mark the email as permanently deleted (not TRASH) and
     * only visible in Google Apps Vault to a Vault administrator. Only used for
     * Google Apps for Work accounts.
     */
    void set_deleted(bool value) {
      _have_deleted_ = true;
      deleted_ = value;
    }

    /**
     * Clears the '<code>internalDateSource</code>' attribute so it is no longer
     * set.
     */
    void clear_internal_date_source() {
      _have_internal_date_source_ = false;
      client::ClearCppValueHelper(&internal_date_source_);
    }


    /**
     * Gets the optional '<code>internalDateSource</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_internal_date_source() const { return internal_date_source_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>internalDateSource</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_internalDateSource() {
      _have_internal_date_source_ = true;
      return &internal_date_source_;
    }


    /**
     * Sets the '<code>internalDateSource</code>' attribute.
     *
     * @param[in] value Source for Gmail's internal date of the message.
     */
    void set_internal_date_source(const string& value) {
      _have_internal_date_source_ = true;
      internal_date_source_ = value;
    }



    /**
     * Clears the '<code>neverMarkSpam</code>' attribute so it is no longer set.
     */
    void clear_never_mark_spam() {
      _have_never_mark_spam_ = false;
      client::ClearCppValueHelper(&never_mark_spam_);
    }


    /**
     * Gets the optional '<code>neverMarkSpam</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_never_mark_spam() const { return never_mark_spam_; }

    /**
     * Sets the '<code>neverMarkSpam</code>' attribute.
     *
     * @param[in] value Ignore the Gmail spam classifier decision and never mark
     * this email as SPAM in the mailbox.
     */
    void set_never_mark_spam(bool value) {
      _have_never_mark_spam_ = true;
      never_mark_spam_ = value;
    }

    /**
     * Clears the '<code>processForCalendar</code>' attribute so it is no longer
     * set.
     */
    void clear_process_for_calendar() {
      _have_process_for_calendar_ = false;
      client::ClearCppValueHelper(&process_for_calendar_);
    }


    /**
     * Gets the optional '<code>processForCalendar</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_process_for_calendar() const { return process_for_calendar_; }

    /**
     * Sets the '<code>processForCalendar</code>' attribute.
     *
     * @param[in] value Process calendar invites in the email and add any
     * extracted meetings to the Google Calendar for this user.
     */
    void set_process_for_calendar(bool value) {
      _have_process_for_calendar_ = true;
      process_for_calendar_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string user_id_;
  bool deleted_;
  string internal_date_source_;
  bool never_mark_spam_;
  bool process_for_calendar_;
  bool _have_deleted_ : 1;
  bool _have_internal_date_source_ : 1;
  bool _have_never_mark_spam_ : 1;
  bool _have_process_for_calendar_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_ImportMethod);
};

/**
 * Implements the insert method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.insert
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_MessagesResource_InsertMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   *
   * @param[in] _content_ The data object to insert.
   */
  UsersResource_MessagesResource_InsertMethod(
        const GmailService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _metadata_ The metadata object to insert. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to insert. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  UsersResource_MessagesResource_InsertMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Message* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_InsertMethod();


    /**
     * Clears the '<code>deleted</code>' attribute so it is no longer set.
     */
    void clear_deleted() {
      _have_deleted_ = false;
      client::ClearCppValueHelper(&deleted_);
    }


    /**
     * Gets the optional '<code>deleted</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_deleted() const { return deleted_; }

    /**
     * Sets the '<code>deleted</code>' attribute.
     *
     * @param[in] value Mark the email as permanently deleted (not TRASH) and
     * only visible in Google Apps Vault to a Vault administrator. Only used for
     * Google Apps for Work accounts.
     */
    void set_deleted(bool value) {
      _have_deleted_ = true;
      deleted_ = value;
    }

    /**
     * Clears the '<code>internalDateSource</code>' attribute so it is no longer
     * set.
     */
    void clear_internal_date_source() {
      _have_internal_date_source_ = false;
      client::ClearCppValueHelper(&internal_date_source_);
    }


    /**
     * Gets the optional '<code>internalDateSource</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_internal_date_source() const { return internal_date_source_; }

    /**
     * Gets a modifiable pointer to the optional
     * <code>internalDateSource</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_internalDateSource() {
      _have_internal_date_source_ = true;
      return &internal_date_source_;
    }


    /**
     * Sets the '<code>internalDateSource</code>' attribute.
     *
     * @param[in] value Source for Gmail's internal date of the message.
     */
    void set_internal_date_source(const string& value) {
      _have_internal_date_source_ = true;
      internal_date_source_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string user_id_;
  bool deleted_;
  string internal_date_source_;
  bool _have_deleted_ : 1;
  bool _have_internal_date_source_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_InsertMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_MessagesResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_MessagesResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_ListMethod();


    /**
     * Clears the '<code>includeSpamTrash</code>' attribute so it is no longer
     * set.
     */
    void clear_include_spam_trash() {
      _have_include_spam_trash_ = false;
      client::ClearCppValueHelper(&include_spam_trash_);
    }


    /**
     * Gets the optional '<code>includeSpamTrash</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_spam_trash() const { return include_spam_trash_; }

    /**
     * Sets the '<code>includeSpamTrash</code>' attribute.
     *
     * @param[in] value Include messages from SPAM and TRASH in the results.
     */
    void set_include_spam_trash(bool value) {
      _have_include_spam_trash_ = true;
      include_spam_trash_ = value;
    }

    /**
     * Clears the '<code>labelIds</code>' attribute so it is no longer set.
     */
    void clear_label_ids() {
      _have_label_ids_ = false;
      client::ClearCppValueHelper(&label_ids_);
    }


    /**
     * Gets the optional '<code>labelIds</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const client::JsonCppArray<string >& get_label_ids() const { return label_ids_; }

    /**
     * Gets a modifiable pointer to the optional <code>labelIds</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    client::JsonCppArray<string >* mutable_labelIds() {
      _have_label_ids_ = true;
      return &label_ids_;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of messages to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token to retrieve a specific page of results in the
     * list.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Only return messages matching the specified query.
     * Supports the same query format as the Gmail search box. For example,
     * "from:someuser@example.com rfc822msgid: is:unread".
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListMessagesResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  bool include_spam_trash_;
  client::JsonCppCapsule< client::JsonCppArray<string > > label_ids_;
  uint32 max_results_;
  string page_token_;
  string q_;
  bool _have_include_spam_trash_ : 1;
  bool _have_label_ids_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_q_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_ListMethod);
};

typedef client::ServiceRequestPager<
            UsersResource_MessagesResource_ListMethod,
            ListMessagesResponse>
        UsersResource_MessagesResource_ListMethodPager;

/**
 * Implements the modify method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_MessagesResource_ModifyMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the message to modify.
   * @param[in] _content_ The data object to modify.
   */
  UsersResource_MessagesResource_ModifyMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id,
      const ModifyMessageRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_ModifyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_ModifyMethod);
};

/**
 * Implements the send method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.compose
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.send
 */
class UsersResource_MessagesResource_SendMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   *
   * @deprecated in favor constructor that includes the media upload parameters.
   *
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   *
   * @param[in] _content_ The data object to send.
   */
  UsersResource_MessagesResource_SendMethod(
        const GmailService* _service_,
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id);
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] _metadata_ The metadata object to send. If this
   *            is NULL then do not upload any metadata.
   * @param[in] _media_content_type_ The content type of the data in the
   *            _media_content_reader_.
   * @param[in] _media_content_reader_ The media content to send. If
   *            this is NULL then do not upload any media and ignore
   *            _media_content_type_.
   */
  UsersResource_MessagesResource_SendMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Message* _metadata_,
      const StringPiece& _media_content_type_,
      client::DataReader* _media_content_reader_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_SendMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }


  /**
   * Returns MediaUploader for uploading the content.
   */

  /**
   * Returns the specification for media upload using the simple protocol.
   */
  static const client::MediaUploadSpec SIMPLE_MEDIA_UPLOAD;
  /**
   * Returns the specification for media upload using the resumable protocol.
   */
  static const client::MediaUploadSpec RESUMABLE_MEDIA_UPLOAD;

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_SendMethod);
};

/**
 * Implements the trash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_MessagesResource_TrashMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the message to Trash.
   */
  UsersResource_MessagesResource_TrashMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_TrashMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_TrashMethod);
};

/**
 * Implements the untrash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_MessagesResource_UntrashMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the message to remove from Trash.
   */
  UsersResource_MessagesResource_UntrashMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_UntrashMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Message* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_UntrashMethod);
};




/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_MessagesResource_AttachmentsResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] message_id The ID of the message containing the attachment.
   * @param[in] id The ID of the attachment.
   */
  UsersResource_MessagesResource_AttachmentsResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& message_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_MessagesResource_AttachmentsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      MessagePartBody* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string message_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_MessagesResource_AttachmentsResource_GetMethod);
};


/**
 * Implements the getAutoForwarding method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_GetAutoForwardingMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_GetAutoForwardingMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_GetAutoForwardingMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AutoForwarding* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_GetAutoForwardingMethod);
};

/**
 * Implements the getImap method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_GetImapMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_GetImapMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_GetImapMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ImapSettings* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_GetImapMethod);
};

/**
 * Implements the getPop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_GetPopMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_GetPopMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_GetPopMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PopSettings* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_GetPopMethod);
};

/**
 * Implements the getVacation method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_GetVacationMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_GetVacationMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_GetVacationMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VacationSettings* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_GetVacationMethod);
};

/**
 * Implements the updateAutoForwarding method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_UpdateAutoForwardingMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to updateAutoForwarding.
   */
  UsersResource_SettingsResource_UpdateAutoForwardingMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const AutoForwarding& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_UpdateAutoForwardingMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      AutoForwarding* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_UpdateAutoForwardingMethod);
};

/**
 * Implements the updateImap method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_UpdateImapMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to updateImap.
   */
  UsersResource_SettingsResource_UpdateImapMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const ImapSettings& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_UpdateImapMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ImapSettings* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_UpdateImapMethod);
};

/**
 * Implements the updatePop method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_UpdatePopMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to updatePop.
   */
  UsersResource_SettingsResource_UpdatePopMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const PopSettings& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_UpdatePopMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      PopSettings* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_UpdatePopMethod);
};

/**
 * Implements the updateVacation method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_UpdateVacationMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to updateVacation.
   */
  UsersResource_SettingsResource_UpdateVacationMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const VacationSettings& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_UpdateVacationMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      VacationSettings* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_UpdateVacationMethod);
};




/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_FiltersResource_CreateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to create.
   */
  UsersResource_SettingsResource_FiltersResource_CreateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const Filter& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_FiltersResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_FiltersResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_FiltersResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] id The ID of the filter to be deleted.
   */
  UsersResource_SettingsResource_FiltersResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_FiltersResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_FiltersResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_FiltersResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] id The ID of the filter to be fetched.
   */
  UsersResource_SettingsResource_FiltersResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_FiltersResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Filter* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_FiltersResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_FiltersResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_FiltersResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_FiltersResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListFiltersResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_FiltersResource_ListMethod);
};


/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to create.
   */
  UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const ForwardingAddress& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingAddress* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] forwarding_email The forwarding address to be deleted.
   */
  UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& forwarding_email);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string forwarding_email_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] forwarding_email The forwarding address to be retrieved.
   */
  UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& forwarding_email);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ForwardingAddress* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string forwarding_email_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListForwardingAddressesResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod);
};


/**
 * Implements the create method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_SendAsResource_CreateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] _content_ The data object to create.
   */
  UsersResource_SettingsResource_SendAsResource_CreateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const SendAs& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_CreateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SendAs* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_CreateMethod);
};

/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_SendAsResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] send_as_email The send-as alias to be deleted.
   */
  UsersResource_SettingsResource_SendAsResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& send_as_email);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string send_as_email_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_SendAsResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] send_as_email The send-as alias to be retrieved.
   */
  UsersResource_SettingsResource_SendAsResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& send_as_email);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_GetMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SendAs* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string send_as_email_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 * https://www.googleapis.com/auth/gmail.settings.basic
 */
class UsersResource_SettingsResource_SendAsResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   */
  UsersResource_SettingsResource_SendAsResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_ListMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListSendAsResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_ListMethod);
};

/**
 * Implements the patch method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_SendAsResource_PatchMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] send_as_email The send-as alias to be updated.
   * @param[in] _content_ The data object to patch.
   */
  UsersResource_SettingsResource_SendAsResource_PatchMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& send_as_email,
      const SendAs& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_PatchMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SendAs* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string send_as_email_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_PatchMethod);
};

/**
 * Implements the update method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.basic
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_SendAsResource_UpdateMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] send_as_email The send-as alias to be updated.
   * @param[in] _content_ The data object to update.
   */
  UsersResource_SettingsResource_SendAsResource_UpdateMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& send_as_email,
      const SendAs& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_UpdateMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      SendAs* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string send_as_email_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_UpdateMethod);
};

/**
 * Implements the verify method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://www.googleapis.com/auth/gmail.settings.sharing
 */
class UsersResource_SettingsResource_SendAsResource_VerifyMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id User's email address. The special value "me" can be used
   * to indicate the authenticated user.
   * @param[in] send_as_email The send-as alias to be verified.
   */
  UsersResource_SettingsResource_SendAsResource_VerifyMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& send_as_email);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_SettingsResource_SendAsResource_VerifyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string send_as_email_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_SettingsResource_SendAsResource_VerifyMethod);
};


/**
 * Implements the delete method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 */
class UsersResource_ThreadsResource_DeleteMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id ID of the Thread to delete.
   */
  UsersResource_ThreadsResource_DeleteMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_ThreadsResource_DeleteMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_ThreadsResource_DeleteMethod);
};

/**
 * Implements the get method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_ThreadsResource_GetMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the thread to retrieve.
   */
  UsersResource_ThreadsResource_GetMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_ThreadsResource_GetMethod();


    /**
     * Clears the '<code>format</code>' attribute so it is no longer set.
     */
    void clear_format() {
      _have_format_ = false;
      client::ClearCppValueHelper(&format_);
    }


    /**
     * Gets the optional '<code>format</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_format() const { return format_; }

    /**
     * Gets a modifiable pointer to the optional <code>format</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_format() {
      _have_format_ = true;
      return &format_;
    }


    /**
     * Sets the '<code>format</code>' attribute.
     *
     * @param[in] value The format to return the messages in.
     */
    void set_format(const string& value) {
      _have_format_ = true;
      format_ = value;
    }



    /**
     * Clears the '<code>metadataHeaders</code>' attribute so it is no longer
     * set.
     */
    void clear_metadata_headers() {
      _have_metadata_headers_ = false;
      client::ClearCppValueHelper(&metadata_headers_);
    }


    /**
     * Gets the optional '<code>metadataHeaders</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const client::JsonCppArray<string >& get_metadata_headers() const { return metadata_headers_; }

    /**
     * Gets a modifiable pointer to the optional <code>metadataHeaders</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    client::JsonCppArray<string >* mutable_metadataHeaders() {
      _have_metadata_headers_ = true;
      return &metadata_headers_;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Thread* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  string format_;
  client::JsonCppCapsule< client::JsonCppArray<string > > metadata_headers_;
  bool _have_format_ : 1;
  bool _have_metadata_headers_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_ThreadsResource_GetMethod);
};

/**
 * Implements the list method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 * https://www.googleapis.com/auth/gmail.readonly
 */
class UsersResource_ThreadsResource_ListMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   */
  UsersResource_ThreadsResource_ListMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_ThreadsResource_ListMethod();


    /**
     * Clears the '<code>includeSpamTrash</code>' attribute so it is no longer
     * set.
     */
    void clear_include_spam_trash() {
      _have_include_spam_trash_ = false;
      client::ClearCppValueHelper(&include_spam_trash_);
    }


    /**
     * Gets the optional '<code>includeSpamTrash</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    bool get_include_spam_trash() const { return include_spam_trash_; }

    /**
     * Sets the '<code>includeSpamTrash</code>' attribute.
     *
     * @param[in] value Include threads from SPAM and TRASH in the results.
     */
    void set_include_spam_trash(bool value) {
      _have_include_spam_trash_ = true;
      include_spam_trash_ = value;
    }

    /**
     * Clears the '<code>labelIds</code>' attribute so it is no longer set.
     */
    void clear_label_ids() {
      _have_label_ids_ = false;
      client::ClearCppValueHelper(&label_ids_);
    }


    /**
     * Gets the optional '<code>labelIds</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const client::JsonCppArray<string >& get_label_ids() const { return label_ids_; }

    /**
     * Gets a modifiable pointer to the optional <code>labelIds</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    client::JsonCppArray<string >* mutable_labelIds() {
      _have_label_ids_ = true;
      return &label_ids_;
    }



    /**
     * Clears the '<code>maxResults</code>' attribute so it is no longer set.
     */
    void clear_max_results() {
      _have_max_results_ = false;
      client::ClearCppValueHelper(&max_results_);
    }


    /**
     * Gets the optional '<code>maxResults</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    uint32 get_max_results() const { return max_results_; }

    /**
     * Sets the '<code>maxResults</code>' attribute.
     *
     * @param[in] value Maximum number of threads to return.
     */
    void set_max_results(uint32 value) {
      _have_max_results_ = true;
      max_results_ = value;
    }

    /**
     * Clears the '<code>pageToken</code>' attribute so it is no longer set.
     */
    void clear_page_token() {
      _have_page_token_ = false;
      client::ClearCppValueHelper(&page_token_);
    }


    /**
     * Gets the optional '<code>pageToken</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_page_token() const { return page_token_; }

    /**
     * Gets a modifiable pointer to the optional <code>pageToken</code>'
     * attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_pageToken() {
      _have_page_token_ = true;
      return &page_token_;
    }


    /**
     * Sets the '<code>pageToken</code>' attribute.
     *
     * @param[in] value Page token to retrieve a specific page of results in the
     * list.
     */
    void set_page_token(const string& value) {
      _have_page_token_ = true;
      page_token_ = value;
    }



    /**
     * Clears the '<code>q</code>' attribute so it is no longer set.
     */
    void clear_q() {
      _have_q_ = false;
      client::ClearCppValueHelper(&q_);
    }


    /**
     * Gets the optional '<code>q</code>' attribute.
     *
     * If the value is not set then the default value will be returned.
     */
    const string& get_q() const { return q_; }

    /**
     * Gets a modifiable pointer to the optional <code>q</code>' attribute.
     *
     * @return  The value can be set by dereferencing the pointer.
     */
    string* mutable_q() {
      _have_q_ = true;
      return &q_;
    }


    /**
     * Sets the '<code>q</code>' attribute.
     *
     * @param[in] value Only return threads matching the specified query.
     * Supports the same query format as the Gmail search box. For example,
     * "from:someuser@example.com rfc822msgid: is:unread".
     */
    void set_q(const string& value) {
      _have_q_ = true;
      q_ = value;
    }

  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);

  /**
   * Appends the optional query parameters to the target URL.
   *
   * @param[in, out] target  The URL string to append to.
   */
  virtual util::Status AppendOptionalQueryParameters(string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      ListThreadsResponse* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  bool include_spam_trash_;
  client::JsonCppCapsule< client::JsonCppArray<string > > label_ids_;
  uint32 max_results_;
  string page_token_;
  string q_;
  bool _have_include_spam_trash_ : 1;
  bool _have_label_ids_ : 1;
  bool _have_max_results_ : 1;
  bool _have_page_token_ : 1;
  bool _have_q_ : 1;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_ThreadsResource_ListMethod);
};

typedef client::ServiceRequestPager<
            UsersResource_ThreadsResource_ListMethod,
            ListThreadsResponse>
        UsersResource_ThreadsResource_ListMethodPager;

/**
 * Implements the modify method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_ThreadsResource_ModifyMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the thread to modify.
   * @param[in] _content_ The data object to modify.
   */
  UsersResource_ThreadsResource_ModifyMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id,
      const ModifyThreadRequest& _content_);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_ThreadsResource_ModifyMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Thread* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;  string _content_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_ThreadsResource_ModifyMethod);
};

/**
 * Implements the trash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_ThreadsResource_TrashMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the thread to Trash.
   */
  UsersResource_ThreadsResource_TrashMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_ThreadsResource_TrashMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Thread* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_ThreadsResource_TrashMethod);
};

/**
 * Implements the untrash method.
 *
 * @ingroup ServiceMethod
 *
 * This class uses the Command Pattern. Construct an instance with the required
 * parameters, then set any additional optional parameters by using the
 * attribute setters. To invoke the method, call <code>Execute</code>.
 *
 * One or more of these authorization scopes are required for this method:
 * https://mail.google.com/
 * https://www.googleapis.com/auth/gmail.modify
 */
class UsersResource_ThreadsResource_UntrashMethod : public GmailServiceBaseRequest {
 public:
  /**
   * The standard constructor takes all the required method parameters.
   * @param[in] _service_  The service instance to send to when executed.
   * @param[in] _credential_  If not NULL, the credential to authorize with.
   *            In practice this is supplied by the user code that is
   *            creating the method instance.
   * @param[in] user_id The user's email address. The special value me can be
   * used to indicate the authenticated user.
   * @param[in] id The ID of the thread to remove from Trash.
   */
  UsersResource_ThreadsResource_UntrashMethod(
      const GmailService* _service_,
      client::AuthorizationCredential* _credential_,
      const StringPiece& user_id,
      const StringPiece& id);

  /**
   * Standard destructor.
   */
  virtual ~UsersResource_ThreadsResource_UntrashMethod();


  /**
   * Appends variable value to the target string.
   *
   * This is a helper function used to resolve templated variables in the URI.
   *
   * @param[in] variable_name  The name of the templated variable.
   * @param[in] config  A pass-through parameter used for lists and maps.
   * @param[in, out] target The string to append the value to.
   */
  virtual util::Status AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target);


  /**
   * Executes the method and parses the response into a data object on success.
   *
   * @param[out] data Loads from the response payload JSON data on success.
   *
   * @return Success if an HTTP 2xx response was received. Otherwise the
   *         status indicates the reason for failure. Finer detail may be
   *         available from the underlying http_request to distinguish the
   *         transport_status from the overal HTTP request status.
   */
  util::Status ExecuteAndParseResponse(
      Thread* data) {
    return GmailServiceBaseRequest::ExecuteAndParseResponse(data);
  }

 private:
  string user_id_;
  string id_;
  DISALLOW_COPY_AND_ASSIGN(UsersResource_ThreadsResource_UntrashMethod);
};



/**
 * Service definition for GmailService (v1).
 *
 * @ingroup ServiceClass
 *
 * For more information about this service, see the API Documentation at
 * <a href='https://developers.google.com/gmail/api/'>'https://developers.google.com/gmail/api/</a>
 */
class GmailService : public client::ClientService {
 public:
  /**
   * The name of the API that this was generated from.
   */
  static const char googleapis_API_NAME[];

  /**
   * The version of the API that this interface was generated from.
   */
  static const char googleapis_API_VERSION[];

  /**
   * The code generator used to generate this API.
   */
  static const char googleapis_API_GENERATOR[];


  /**
   * Acts as message factory for accessing  data.
   *
   * @ingroup ServiceClass
   */
  class UsersResource {
   public:
    /**
     * Standard constructor.
     *
     * @param[in] service  The service instance is used to bind to the
     *            methods created from this resource instance.  This will be
     *            the service that methods are invoked on.
     */
    explicit UsersResource(GmailService* service);

    /**
     * Standard destructor.
     */
    ~UsersResource() {}

    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class DraftsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit DraftsResource(GmailService* service);

      /**
       * Standard destructor.
       */
      ~DraftsResource() {}



      /**
       * Creates a new UsersResource_DraftsResource_CreateMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_CreateMethod* NewCreateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_DraftsResource_CreateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _metadata_ The metadata object to create. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to create. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_CreateMethod* NewCreateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const Draft* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;

      /**
       * Creates a new UsersResource_DraftsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the draft to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_DraftsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the draft to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_DraftsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      UsersResource_DraftsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;


      /**
       * Creates a new UsersResource_DraftsResource_SendMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_SendMethod* NewSendMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_DraftsResource_SendMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _metadata_ The metadata object to send. If this is NULL then
       * do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to send. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_SendMethod* NewSendMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const Draft* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;


      /**
       * Creates a new UsersResource_DraftsResource_UpdateMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the draft to update.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_DraftsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the draft to update.
       * @param[in] _metadata_ The metadata object to update. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to update. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_DraftsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id,
          const Draft* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;

     private:
      GmailService* service_;

      DISALLOW_COPY_AND_ASSIGN(DraftsResource);
    };
    /**
     * Gets the drafts resource method factory.
     *
     * @return DraftsResource for creating methods.
     */
    const DraftsResource& get_drafts() const {
      return drafts_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class HistoryResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit HistoryResource(GmailService* service);

      /**
       * Standard destructor.
       */
      ~HistoryResource() {}


      /**
       * Creates a new UsersResource_HistoryResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_HistoryResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      UsersResource_HistoryResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

     private:
      GmailService* service_;

      DISALLOW_COPY_AND_ASSIGN(HistoryResource);
    };
    /**
     * Gets the history resource method factory.
     *
     * @return HistoryResource for creating methods.
     */
    const HistoryResource& get_history() const {
      return history_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class LabelsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit LabelsResource(GmailService* service);

      /**
       * Standard destructor.
       */
      ~LabelsResource() {}


      /**
       * Creates a new UsersResource_LabelsResource_CreateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _content_ The data object to create.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_LabelsResource_CreateMethod* NewCreateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const Label& _content_) const;

      /**
       * Creates a new UsersResource_LabelsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the label to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_LabelsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_LabelsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the label to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_LabelsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_LabelsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_LabelsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_LabelsResource_PatchMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the label to update.
       * @param[in] _content_ The data object to patch.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_LabelsResource_PatchMethod* NewPatchMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id,
          const Label& _content_) const;

      /**
       * Creates a new UsersResource_LabelsResource_UpdateMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the label to update.
       * @param[in] _content_ The data object to update.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_LabelsResource_UpdateMethod* NewUpdateMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id,
          const Label& _content_) const;

     private:
      GmailService* service_;

      DISALLOW_COPY_AND_ASSIGN(LabelsResource);
    };
    /**
     * Gets the labels resource method factory.
     *
     * @return LabelsResource for creating methods.
     */
    const LabelsResource& get_labels() const {
      return labels_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class MessagesResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit MessagesResource(GmailService* service);

      /**
       * Standard destructor.
       */
      ~MessagesResource() {}

      /**
       * Acts as message factory for accessing  data.
       *
       * @ingroup ServiceClass
       */
      class AttachmentsResource {
       public:
        /**
         * Standard constructor.
         *
         * @param[in] service  The service instance is used to bind to the
         *            methods created from this resource instance.  This will be
         *            the service that methods are invoked on.
         */
        explicit AttachmentsResource(GmailService* service);

        /**
         * Standard destructor.
         */
        ~AttachmentsResource() {}


        /**
         * Creates a new
         * UsersResource_MessagesResource_AttachmentsResource_GetMethod
         * instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id The user's email address. The special value me can
         * be used to indicate the authenticated user.
         * @param[in] message_id The ID of the message containing the
         * attachment.
         * @param[in] id The ID of the attachment.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_MessagesResource_AttachmentsResource_GetMethod* NewGetMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& message_id,
            const StringPiece& id) const;

       private:
        GmailService* service_;

        DISALLOW_COPY_AND_ASSIGN(AttachmentsResource);
      };
      /**
       * Gets the attachments resource method factory.
       *
       * @return AttachmentsResource for creating methods.
       */
      const AttachmentsResource& get_attachments() const {
        return attachments_;
      }



      /**
       * Creates a new UsersResource_MessagesResource_BatchDeleteMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _content_ The data object to batchDelete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_BatchDeleteMethod* NewBatchDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const BatchDeleteMessagesRequest& _content_) const;

      /**
       * Creates a new UsersResource_MessagesResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the message to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_MessagesResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the message to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;


      /**
       * Creates a new UsersResource_MessagesResource_ImportMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_ImportMethod* NewImportMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_MessagesResource_ImportMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _metadata_ The metadata object to import. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to import. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_ImportMethod* NewImportMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const Message* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;


      /**
       * Creates a new UsersResource_MessagesResource_InsertMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_MessagesResource_InsertMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _metadata_ The metadata object to insert. If this is NULL
       * then do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to insert. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_InsertMethod* NewInsertMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const Message* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;

      /**
       * Creates a new UsersResource_MessagesResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      UsersResource_MessagesResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_MessagesResource_ModifyMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the message to modify.
       * @param[in] _content_ The data object to modify.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_ModifyMethod* NewModifyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id,
          const ModifyMessageRequest& _content_) const;


      /**
       * Creates a new UsersResource_MessagesResource_SendMethod instance.
       * @deprecated
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_SendMethod* NewSendMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_MessagesResource_SendMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] _metadata_ The metadata object to send. If this is NULL then
       * do not upload any metadata.
       * @param[in] _media_content_type_ The content type of the data in the
       * _media_content_reader_.
       * @param[in] _media_content_reader_ The media content to send. If
       * this is NULL then do not upload any media and ignore
       * _media_content_type_.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_SendMethod* NewSendMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const Message* _metadata_,
          const StringPiece& _media_content_type_,
          client::DataReader* _media_content_reader_) const;

      /**
       * Creates a new UsersResource_MessagesResource_TrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the message to Trash.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_TrashMethod* NewTrashMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_MessagesResource_UntrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the message to remove from Trash.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_MessagesResource_UntrashMethod* NewUntrashMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

     private:
      GmailService* service_;
      AttachmentsResource attachments_;

      DISALLOW_COPY_AND_ASSIGN(MessagesResource);
    };
    /**
     * Gets the messages resource method factory.
     *
     * @return MessagesResource for creating methods.
     */
    const MessagesResource& get_messages() const {
      return messages_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class SettingsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit SettingsResource(GmailService* service);

      /**
       * Standard destructor.
       */
      ~SettingsResource() {}

      /**
       * Acts as message factory for accessing  data.
       *
       * @ingroup ServiceClass
       */
      class FiltersResource {
       public:
        /**
         * Standard constructor.
         *
         * @param[in] service  The service instance is used to bind to the
         *            methods created from this resource instance.  This will be
         *            the service that methods are invoked on.
         */
        explicit FiltersResource(GmailService* service);

        /**
         * Standard destructor.
         */
        ~FiltersResource() {}


        /**
         * Creates a new
         * UsersResource_SettingsResource_FiltersResource_CreateMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] _content_ The data object to create.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_FiltersResource_CreateMethod* NewCreateMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const Filter& _content_) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_FiltersResource_DeleteMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] id The ID of the filter to be deleted.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_FiltersResource_DeleteMethod* NewDeleteMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& id) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_FiltersResource_GetMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] id The ID of the filter to be fetched.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_FiltersResource_GetMethod* NewGetMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& id) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_FiltersResource_ListMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_FiltersResource_ListMethod* NewListMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id) const;

       private:
        GmailService* service_;

        DISALLOW_COPY_AND_ASSIGN(FiltersResource);
      };
      /**
       * Gets the filters resource method factory.
       *
       * @return FiltersResource for creating methods.
       */
      const FiltersResource& get_filters() const {
        return filters_;
      }


      /**
       * Acts as message factory for accessing  data.
       *
       * @ingroup ServiceClass
       */
      class ForwardingAddressesResource {
       public:
        /**
         * Standard constructor.
         *
         * @param[in] service  The service instance is used to bind to the
         *            methods created from this resource instance.  This will be
         *            the service that methods are invoked on.
         */
        explicit ForwardingAddressesResource(GmailService* service);

        /**
         * Standard destructor.
         */
        ~ForwardingAddressesResource() {}


        /**
         * Creates a new UsersResource_SettingsResource_ForwardingAddressesResou
         * rce_CreateMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] _content_ The data object to create.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod* NewCreateMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const ForwardingAddress& _content_) const;

        /**
         * Creates a new UsersResource_SettingsResource_ForwardingAddressesResou
         * rce_DeleteMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] forwarding_email The forwarding address to be deleted.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod* NewDeleteMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& forwarding_email) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod
         * instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] forwarding_email The forwarding address to be retrieved.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod* NewGetMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& forwarding_email) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod
         * instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod* NewListMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id) const;

       private:
        GmailService* service_;

        DISALLOW_COPY_AND_ASSIGN(ForwardingAddressesResource);
      };
      /**
       * Gets the forwardingAddresses resource method factory.
       *
       * @return ForwardingAddressesResource for creating methods.
       */
      const ForwardingAddressesResource& get_forwarding_addresses() const {
        return forwarding_addresses_;
      }


      /**
       * Acts as message factory for accessing  data.
       *
       * @ingroup ServiceClass
       */
      class SendAsResource {
       public:
        /**
         * Standard constructor.
         *
         * @param[in] service  The service instance is used to bind to the
         *            methods created from this resource instance.  This will be
         *            the service that methods are invoked on.
         */
        explicit SendAsResource(GmailService* service);

        /**
         * Standard destructor.
         */
        ~SendAsResource() {}


        /**
         * Creates a new
         * UsersResource_SettingsResource_SendAsResource_CreateMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] _content_ The data object to create.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_CreateMethod* NewCreateMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const SendAs& _content_) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_SendAsResource_DeleteMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] send_as_email The send-as alias to be deleted.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_DeleteMethod* NewDeleteMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& send_as_email) const;

        /**
         * Creates a new UsersResource_SettingsResource_SendAsResource_GetMethod
         * instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] send_as_email The send-as alias to be retrieved.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_GetMethod* NewGetMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& send_as_email) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_SendAsResource_ListMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_ListMethod* NewListMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_SendAsResource_PatchMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] send_as_email The send-as alias to be updated.
         * @param[in] _content_ The data object to patch.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_PatchMethod* NewPatchMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& send_as_email,
            const SendAs& _content_) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_SendAsResource_UpdateMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] send_as_email The send-as alias to be updated.
         * @param[in] _content_ The data object to update.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_UpdateMethod* NewUpdateMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& send_as_email,
            const SendAs& _content_) const;

        /**
         * Creates a new
         * UsersResource_SettingsResource_SendAsResource_VerifyMethod instance.
         *
         * @param[in] _credential_  Can be NULL.
         *            NULL credentials will not authorize the request.
         * @param[in] user_id User's email address. The special value "me" can
         * be used to indicate the authenticated user.
         * @param[in] send_as_email The send-as alias to be verified.
         * @returns  The caller should <code>Execute</code> the method instance,
         *           then destroy it when they are finished.
         */
        UsersResource_SettingsResource_SendAsResource_VerifyMethod* NewVerifyMethod(
            client::AuthorizationCredential* _credential_,
            const StringPiece& user_id,
            const StringPiece& send_as_email) const;

       private:
        GmailService* service_;

        DISALLOW_COPY_AND_ASSIGN(SendAsResource);
      };
      /**
       * Gets the sendAs resource method factory.
       *
       * @return SendAsResource for creating methods.
       */
      const SendAsResource& get_send_as() const {
        return send_as_;
      }



      /**
       * Creates a new UsersResource_SettingsResource_GetAutoForwardingMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_GetAutoForwardingMethod* NewGetAutoForwardingMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_SettingsResource_GetImapMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_GetImapMethod* NewGetImapMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_SettingsResource_GetPopMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_GetPopMethod* NewGetPopMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_SettingsResource_GetVacationMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_GetVacationMethod* NewGetVacationMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_SettingsResource_UpdateAutoForwardingMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @param[in] _content_ The data object to updateAutoForwarding.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_UpdateAutoForwardingMethod* NewUpdateAutoForwardingMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const AutoForwarding& _content_) const;

      /**
       * Creates a new UsersResource_SettingsResource_UpdateImapMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @param[in] _content_ The data object to updateImap.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_UpdateImapMethod* NewUpdateImapMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const ImapSettings& _content_) const;

      /**
       * Creates a new UsersResource_SettingsResource_UpdatePopMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @param[in] _content_ The data object to updatePop.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_UpdatePopMethod* NewUpdatePopMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const PopSettings& _content_) const;

      /**
       * Creates a new UsersResource_SettingsResource_UpdateVacationMethod
       * instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id User's email address. The special value "me" can be
       * used to indicate the authenticated user.
       * @param[in] _content_ The data object to updateVacation.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_SettingsResource_UpdateVacationMethod* NewUpdateVacationMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const VacationSettings& _content_) const;

     private:
      GmailService* service_;
      FiltersResource filters_;
      ForwardingAddressesResource forwarding_addresses_;
      SendAsResource send_as_;

      DISALLOW_COPY_AND_ASSIGN(SettingsResource);
    };
    /**
     * Gets the settings resource method factory.
     *
     * @return SettingsResource for creating methods.
     */
    const SettingsResource& get_settings() const {
      return settings_;
    }


    /**
     * Acts as message factory for accessing  data.
     *
     * @ingroup ServiceClass
     */
    class ThreadsResource {
     public:
      /**
       * Standard constructor.
       *
       * @param[in] service  The service instance is used to bind to the
       *            methods created from this resource instance.  This will be
       *            the service that methods are invoked on.
       */
      explicit ThreadsResource(GmailService* service);

      /**
       * Standard destructor.
       */
      ~ThreadsResource() {}


      /**
       * Creates a new UsersResource_ThreadsResource_DeleteMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id ID of the Thread to delete.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_ThreadsResource_DeleteMethod* NewDeleteMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_ThreadsResource_GetMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the thread to retrieve.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_ThreadsResource_GetMethod* NewGetMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_ThreadsResource_ListMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_ThreadsResource_ListMethod* NewListMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a pager for iterating over incremental result pages.
       * @param[in] _credential_  NULL credentials will not authorize the
       * request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       *
       *
       * @see googleapis::googleapis::ServiceRequestPager
       */
      UsersResource_ThreadsResource_ListMethodPager* NewListMethodPager(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id) const;

      /**
       * Creates a new UsersResource_ThreadsResource_ModifyMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the thread to modify.
       * @param[in] _content_ The data object to modify.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_ThreadsResource_ModifyMethod* NewModifyMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id,
          const ModifyThreadRequest& _content_) const;

      /**
       * Creates a new UsersResource_ThreadsResource_TrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the thread to Trash.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_ThreadsResource_TrashMethod* NewTrashMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

      /**
       * Creates a new UsersResource_ThreadsResource_UntrashMethod instance.
       *
       * @param[in] _credential_  Can be NULL.
       *            NULL credentials will not authorize the request.
       * @param[in] user_id The user's email address. The special value me can
       * be used to indicate the authenticated user.
       * @param[in] id The ID of the thread to remove from Trash.
       * @returns  The caller should <code>Execute</code> the method instance,
       *           then destroy it when they are finished.
       */
      UsersResource_ThreadsResource_UntrashMethod* NewUntrashMethod(
          client::AuthorizationCredential* _credential_,
          const StringPiece& user_id,
          const StringPiece& id) const;

     private:
      GmailService* service_;

      DISALLOW_COPY_AND_ASSIGN(ThreadsResource);
    };
    /**
     * Gets the threads resource method factory.
     *
     * @return ThreadsResource for creating methods.
     */
    const ThreadsResource& get_threads() const {
      return threads_;
    }



    /**
     * Creates a new UsersResource_GetProfileMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] user_id The user's email address. The special value me can be
     * used to indicate the authenticated user.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UsersResource_GetProfileMethod* NewGetProfileMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id) const;

    /**
     * Creates a new UsersResource_StopMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] user_id The user's email address. The special value me can be
     * used to indicate the authenticated user.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UsersResource_StopMethod* NewStopMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id) const;

    /**
     * Creates a new UsersResource_WatchMethod instance.
     *
     * @param[in] _credential_  Can be NULL.
     *            NULL credentials will not authorize the request.
     * @param[in] user_id The user's email address. The special value me can be
     * used to indicate the authenticated user.
     * @param[in] _content_ The data object to watch.
     * @returns  The caller should <code>Execute</code> the method instance,
     *           then destroy it when they are finished.
     */
    UsersResource_WatchMethod* NewWatchMethod(
        client::AuthorizationCredential* _credential_,
        const StringPiece& user_id,
        const WatchRequest& _content_) const;

   private:
    GmailService* service_;
    DraftsResource drafts_;
    HistoryResource history_;
    LabelsResource labels_;
    MessagesResource messages_;
    SettingsResource settings_;
    ThreadsResource threads_;

    DISALLOW_COPY_AND_ASSIGN(UsersResource);
  };



  /**
   * Standard constructor.
   *
   * @param[in] transport  The transport to use when creating methods to invoke
   *                       on this service instance.
   */
  explicit GmailService(client::HttpTransport* transport);

  /**
   * Standard destructor.
   */
  virtual ~GmailService();

  /**
   * Gets the  resource method factory.
   *
   * @return UsersResource for creating methods.
   */
  const UsersResource& get_users() const {
    return users_;
  }

  /**
   * Declares the OAuth2.0 scopes used within Gmail API
   *
   * These scopes shoudl be used when asking for credentials to invoke methods
   * in the GmailService.
   */
  class SCOPES {
   public:
    /**
     * View and manage your mail.
     */
    static const char MAIL_GOOGLE_COM[];

    /**
     * Manage drafts and send emails.
     */
    static const char GMAIL_COMPOSE[];

    /**
     * Insert mail into your mailbox.
     */
    static const char GMAIL_INSERT[];

    /**
     * Manage mailbox labels.
     */
    static const char GMAIL_LABELS[];

    /**
     * View and modify but not delete your email.
     */
    static const char GMAIL_MODIFY[];

    /**
     * View your emails messages and settings.
     */
    static const char GMAIL_READONLY[];

    /**
     * Send email on your behalf.
     */
    static const char GMAIL_SEND[];

    /**
     * Manage your basic mail settings.
     */
    static const char GMAIL_SETTINGS_BASIC[];

    /**
     * Manage your sensitive mail settings, including who can manage your mail.
     */
    static const char GMAIL_SETTINGS_SHARING[];

   private:
    SCOPES();  // Never instantiated.
    ~SCOPES();  // Never instantiated.
  };

 private:
  UsersResource users_;

  DISALLOW_COPY_AND_ASSIGN(GmailService);
};


/**
 * @defgroup DataObject Gmail API Data Objects
 *
 * The data objects are used as parameters and responses from service requests.
 * For more information about using data objects, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceClass Gmail API Service
 *
 * The service classes contain information about accessing and using the
 * Gmail API cloud service.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */

/**
 * @defgroup ServiceMethod Gmail API Service Methods
 *
 * The service method classes are used to create and invoke methods in the
 * GmailService to access the Gmail API.
 *
 * For more information about using services, see the
 * <a href='https://developers.google.com/api-client-library/cpp/'>
 * Google APIs Client Library for C++ Developers's Guide</a>.
 */
}  // namespace google_gmail_api
#endif  // GOOGLE_GMAIL_API_GMAIL_SERVICE_H_
