// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-07-08 17:28:43 UTC
//   on: 2016-08-08, 17:19:17 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Gmail API (gmail/v1)
// Generated from:
//   Version: v1
//   Revision: 48
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_GMAIL_API_SEND_AS_H_
#define  GOOGLE_GMAIL_API_SEND_AS_H_

#include <string>
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

#include "google/gmail_api/smtp_msa.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_gmail_api {
using namespace googleapis;

/**
 * Settings associated with a send-as alias, which can be either the primary
 * login address associated with the account or a custom "from" address. Send-as
 * aliases correspond to the "Send Mail As" feature in the web interface. See
 * for more details.
 *
 * @ingroup DataObject
 */
class SendAs : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static SendAs* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SendAs(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit SendAs(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~SendAs();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_gmail_api::SendAs</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_gmail_api::SendAs");
  }

  /**
   * Determine if the '<code>displayName</code>' attribute was set.
   *
   * @return true if the '<code>displayName</code>' attribute was set.
   */
  bool has_display_name() const {
    return Storage().isMember("displayName");
  }

  /**
   * Clears the '<code>displayName</code>' attribute.
   */
  void clear_display_name() {
    MutableStorage()->removeMember("displayName");
  }


  /**
   * Get the value of the '<code>displayName</code>' attribute.
   */
  const StringPiece get_display_name() const {
    const Json::Value& v = Storage("displayName");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>displayName</code>' attribute.
   *
   * A name that appears in the "From:" header for mail sent using this alias.
   * For custom "from" addresses, when this is empty, Gmail will populate the
   * "From:" header with the name that is used for the primary address
   * associated with the account.
   *
   * @param[in] value The new value.
   */
  void set_display_name(const StringPiece& value) {
    *MutableStorage("displayName") = value.data();
  }

  /**
   * Determine if the '<code>isDefault</code>' attribute was set.
   *
   * @return true if the '<code>isDefault</code>' attribute was set.
   */
  bool has_is_default() const {
    return Storage().isMember("isDefault");
  }

  /**
   * Clears the '<code>isDefault</code>' attribute.
   */
  void clear_is_default() {
    MutableStorage()->removeMember("isDefault");
  }


  /**
   * Get the value of the '<code>isDefault</code>' attribute.
   */
  bool get_is_default() const {
    const Json::Value& storage = Storage("isDefault");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>isDefault</code>' attribute.
   *
   * Whether this address is selected as the default "From:" address in
   * situations such as composing a new message or sending a vacation auto-
   * reply. Every Gmail account has exactly one default send-as address, so the
   * only legal value that clients may write to this field is true. Changing
   * this from false to true for an address will result in this field becoming
   * false for the other previous default address.
   *
   * @param[in] value The new value.
   */
  void set_is_default(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("isDefault"));
  }

  /**
   * Determine if the '<code>isPrimary</code>' attribute was set.
   *
   * @return true if the '<code>isPrimary</code>' attribute was set.
   */
  bool has_is_primary() const {
    return Storage().isMember("isPrimary");
  }

  /**
   * Clears the '<code>isPrimary</code>' attribute.
   */
  void clear_is_primary() {
    MutableStorage()->removeMember("isPrimary");
  }


  /**
   * Get the value of the '<code>isPrimary</code>' attribute.
   */
  bool get_is_primary() const {
    const Json::Value& storage = Storage("isPrimary");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>isPrimary</code>' attribute.
   *
   * Whether this address is the primary address used to login to the account.
   * Every Gmail account has exactly one primary address, and it cannot be
   * deleted from the collection of send-as aliases. This field is read-only.
   *
   * @param[in] value The new value.
   */
  void set_is_primary(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("isPrimary"));
  }

  /**
   * Determine if the '<code>replyToAddress</code>' attribute was set.
   *
   * @return true if the '<code>replyToAddress</code>' attribute was set.
   */
  bool has_reply_to_address() const {
    return Storage().isMember("replyToAddress");
  }

  /**
   * Clears the '<code>replyToAddress</code>' attribute.
   */
  void clear_reply_to_address() {
    MutableStorage()->removeMember("replyToAddress");
  }


  /**
   * Get the value of the '<code>replyToAddress</code>' attribute.
   */
  const StringPiece get_reply_to_address() const {
    const Json::Value& v = Storage("replyToAddress");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>replyToAddress</code>' attribute.
   *
   * An optional email address that is included in a "Reply-To:" header for mail
   * sent using this alias. If this is empty, Gmail will not generate a "Reply-
   * To:" header.
   *
   * @param[in] value The new value.
   */
  void set_reply_to_address(const StringPiece& value) {
    *MutableStorage("replyToAddress") = value.data();
  }

  /**
   * Determine if the '<code>sendAsEmail</code>' attribute was set.
   *
   * @return true if the '<code>sendAsEmail</code>' attribute was set.
   */
  bool has_send_as_email() const {
    return Storage().isMember("sendAsEmail");
  }

  /**
   * Clears the '<code>sendAsEmail</code>' attribute.
   */
  void clear_send_as_email() {
    MutableStorage()->removeMember("sendAsEmail");
  }


  /**
   * Get the value of the '<code>sendAsEmail</code>' attribute.
   */
  const StringPiece get_send_as_email() const {
    const Json::Value& v = Storage("sendAsEmail");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>sendAsEmail</code>' attribute.
   *
   * The email address that appears in the "From:" header for mail sent using
   * this alias. This is read-only for all operations except create.
   *
   * @param[in] value The new value.
   */
  void set_send_as_email(const StringPiece& value) {
    *MutableStorage("sendAsEmail") = value.data();
  }

  /**
   * Determine if the '<code>signature</code>' attribute was set.
   *
   * @return true if the '<code>signature</code>' attribute was set.
   */
  bool has_signature() const {
    return Storage().isMember("signature");
  }

  /**
   * Clears the '<code>signature</code>' attribute.
   */
  void clear_signature() {
    MutableStorage()->removeMember("signature");
  }


  /**
   * Get the value of the '<code>signature</code>' attribute.
   */
  const StringPiece get_signature() const {
    const Json::Value& v = Storage("signature");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>signature</code>' attribute.
   *
   * An optional HTML signature that is included in messages composed with this
   * alias in the Gmail web UI.
   *
   * @param[in] value The new value.
   */
  void set_signature(const StringPiece& value) {
    *MutableStorage("signature") = value.data();
  }

  /**
   * Determine if the '<code>smtpMsa</code>' attribute was set.
   *
   * @return true if the '<code>smtpMsa</code>' attribute was set.
   */
  bool has_smtp_msa() const {
    return Storage().isMember("smtpMsa");
  }

  /**
   * Clears the '<code>smtpMsa</code>' attribute.
   */
  void clear_smtp_msa() {
    MutableStorage()->removeMember("smtpMsa");
  }


  /**
   * Get a reference to the value of the '<code>smtpMsa</code>' attribute.
   */
  const SmtpMsa get_smtp_msa() const;

  /**
   * Gets a reference to a mutable value of the '<code>smtpMsa</code>' property.
   *
   * An optional SMTP service that will be used as an outbound relay for mail
   * sent using this alias. If this is empty, outbound mail will be sent
   * directly from Gmail's servers to the destination SMTP service. This setting
   * only applies to custom "from" aliases.
   *
   * @return The result can be modified to change the attribute value.
   */
  SmtpMsa mutable_smtpMsa();

  /**
   * Determine if the '<code>treatAsAlias</code>' attribute was set.
   *
   * @return true if the '<code>treatAsAlias</code>' attribute was set.
   */
  bool has_treat_as_alias() const {
    return Storage().isMember("treatAsAlias");
  }

  /**
   * Clears the '<code>treatAsAlias</code>' attribute.
   */
  void clear_treat_as_alias() {
    MutableStorage()->removeMember("treatAsAlias");
  }


  /**
   * Get the value of the '<code>treatAsAlias</code>' attribute.
   */
  bool get_treat_as_alias() const {
    const Json::Value& storage = Storage("treatAsAlias");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>treatAsAlias</code>' attribute.
   *
   * Whether Gmail should treat this address as an alias for the user's primary
   * email address. See  for more details. This setting only applies to custom
   * "from" aliases.
   *
   * @param[in] value The new value.
   */
  void set_treat_as_alias(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("treatAsAlias"));
  }

  /**
   * Determine if the '<code>verificationStatus</code>' attribute was set.
   *
   * @return true if the '<code>verificationStatus</code>' attribute was set.
   */
  bool has_verification_status() const {
    return Storage().isMember("verificationStatus");
  }

  /**
   * Clears the '<code>verificationStatus</code>' attribute.
   */
  void clear_verification_status() {
    MutableStorage()->removeMember("verificationStatus");
  }


  /**
   * Get the value of the '<code>verificationStatus</code>' attribute.
   */
  const StringPiece get_verification_status() const {
    const Json::Value& v = Storage("verificationStatus");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>verificationStatus</code>' attribute.
   *
   * Indicates whether this address has been verified for use as a send-as
   * alias. Read-only. This setting only applies to custom "from" aliases.
   *
   * @param[in] value The new value.
   */
  void set_verification_status(const StringPiece& value) {
    *MutableStorage("verificationStatus") = value.data();
  }

 private:
  void operator=(const SendAs&);
};  // SendAs
}  // namespace google_gmail_api
#endif  // GOOGLE_GMAIL_API_SEND_AS_H_
