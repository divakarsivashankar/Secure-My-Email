// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.

// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-07-08 17:28:43 UTC
//   on: 2016-08-08, 17:19:17 UTC
//   C++ generator version: 0.1.4

// ----------------------------------------------------------------------------
// NOTE: This file is generated from Google APIs Discovery Service.
// Service:
//   Gmail API (gmail/v1)
// Generated from:
//   Version: v1
//   Revision: 48
// Generated by:
//    Tool: google-apis-code-generator 1.5.1
//     C++: 0.1.4
#ifndef  GOOGLE_GMAIL_API_IMAP_SETTINGS_H_
#define  GOOGLE_GMAIL_API_IMAP_SETTINGS_H_

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/base/macros.h"
#include "googleapis/client/data/jsoncpp_data.h"
#include "googleapis/strings/stringpiece.h"

namespace Json {
class Value;
}  // namespace Json

namespace google_gmail_api {
using namespace googleapis;

/**
 * IMAP settings for an account.
 *
 * @ingroup DataObject
 */
class ImapSettings : public client::JsonCppData {
 public:
  /**
   * Creates a new default instance.
   *
   * @return Ownership is passed back to the caller.
   */
  static ImapSettings* New();

  /**
   * Standard constructor for an immutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ImapSettings(const Json::Value& storage);

  /**
   * Standard constructor for a mutable data object instance.
   *
   * @param[in] storage  The underlying data storage for this instance.
   */
  explicit ImapSettings(Json::Value* storage);

  /**
   * Standard destructor.
   */
  virtual ~ImapSettings();

  /**
   * Returns a string denoting the type of this data object.
   *
   * @return <code>google_gmail_api::ImapSettings</code>
   */
  const StringPiece GetTypeName() const {
    return StringPiece("google_gmail_api::ImapSettings");
  }

  /**
   * Determine if the '<code>autoExpunge</code>' attribute was set.
   *
   * @return true if the '<code>autoExpunge</code>' attribute was set.
   */
  bool has_auto_expunge() const {
    return Storage().isMember("autoExpunge");
  }

  /**
   * Clears the '<code>autoExpunge</code>' attribute.
   */
  void clear_auto_expunge() {
    MutableStorage()->removeMember("autoExpunge");
  }


  /**
   * Get the value of the '<code>autoExpunge</code>' attribute.
   */
  bool get_auto_expunge() const {
    const Json::Value& storage = Storage("autoExpunge");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>autoExpunge</code>' attribute.
   *
   * If this value is true, Gmail will immediately expunge a message when it is
   * marked as deleted in IMAP. Otherwise, Gmail will wait for an update from
   * the client before expunging messages marked as deleted.
   *
   * @param[in] value The new value.
   */
  void set_auto_expunge(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("autoExpunge"));
  }

  /**
   * Determine if the '<code>enabled</code>' attribute was set.
   *
   * @return true if the '<code>enabled</code>' attribute was set.
   */
  bool has_enabled() const {
    return Storage().isMember("enabled");
  }

  /**
   * Clears the '<code>enabled</code>' attribute.
   */
  void clear_enabled() {
    MutableStorage()->removeMember("enabled");
  }


  /**
   * Get the value of the '<code>enabled</code>' attribute.
   */
  bool get_enabled() const {
    const Json::Value& storage = Storage("enabled");
    return client::JsonValueToCppValueHelper<bool >(storage);
  }

  /**
   * Change the '<code>enabled</code>' attribute.
   *
   * Whether IMAP is enabled for the account.
   *
   * @param[in] value The new value.
   */
  void set_enabled(bool value) {
    client::SetJsonValueFromCppValueHelper<bool >(
      value, MutableStorage("enabled"));
  }

  /**
   * Determine if the '<code>expungeBehavior</code>' attribute was set.
   *
   * @return true if the '<code>expungeBehavior</code>' attribute was set.
   */
  bool has_expunge_behavior() const {
    return Storage().isMember("expungeBehavior");
  }

  /**
   * Clears the '<code>expungeBehavior</code>' attribute.
   */
  void clear_expunge_behavior() {
    MutableStorage()->removeMember("expungeBehavior");
  }


  /**
   * Get the value of the '<code>expungeBehavior</code>' attribute.
   */
  const StringPiece get_expunge_behavior() const {
    const Json::Value& v = Storage("expungeBehavior");
    if (v == Json::Value::null) return StringPiece("");
    return StringPiece(v.asCString());
  }

  /**
   * Change the '<code>expungeBehavior</code>' attribute.
   *
   * The action that will be executed on a message when it is marked as deleted
   * and expunged from the last visible IMAP folder.
   *
   * @param[in] value The new value.
   */
  void set_expunge_behavior(const StringPiece& value) {
    *MutableStorage("expungeBehavior") = value.data();
  }

  /**
   * Determine if the '<code>maxFolderSize</code>' attribute was set.
   *
   * @return true if the '<code>maxFolderSize</code>' attribute was set.
   */
  bool has_max_folder_size() const {
    return Storage().isMember("maxFolderSize");
  }

  /**
   * Clears the '<code>maxFolderSize</code>' attribute.
   */
  void clear_max_folder_size() {
    MutableStorage()->removeMember("maxFolderSize");
  }


  /**
   * Get the value of the '<code>maxFolderSize</code>' attribute.
   */
  int32 get_max_folder_size() const {
    const Json::Value& storage = Storage("maxFolderSize");
    return client::JsonValueToCppValueHelper<int32 >(storage);
  }

  /**
   * Change the '<code>maxFolderSize</code>' attribute.
   *
   * An optional limit on the number of messages that an IMAP folder may
   * contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of zero is
   * interpreted to mean that there is no limit.
   *
   * @param[in] value The new value.
   */
  void set_max_folder_size(int32 value) {
    client::SetJsonValueFromCppValueHelper<int32 >(
      value, MutableStorage("maxFolderSize"));
  }

 private:
  void operator=(const ImapSettings&);
};  // ImapSettings
}  // namespace google_gmail_api
#endif  // GOOGLE_GMAIL_API_IMAP_SETTINGS_H_
