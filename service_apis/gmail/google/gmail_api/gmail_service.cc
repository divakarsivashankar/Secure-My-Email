// Copyright 2010 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License. You may obtain a copy of
// the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations under
// the License.
//
//------------------------------------------------------------------------------
// This code was generated by google-apis-code-generator 1.5.1
//   Build date: 2016-07-08 17:28:43 UTC
//   on: 2016-08-08, 17:19:17 UTC
//   C++ generator version: 0.1.4
//
//  Changes to this file may cause incorrect behavior and will be lost if
//  the code is regenerated.
//------------------------------------------------------------------------------
#include "google/gmail_api/gmail_service.h"

#include <string>
#include "googleapis/base/integral_types.h"
#include "googleapis/client/service/client_service.h"
#include "googleapis/client/service/media_uploader.h"
#include "googleapis/client/service/service_request_pager.h"
#include "googleapis/client/util/status.h"

#include "google/gmail_api/auto_forwarding.h"
#include "google/gmail_api/batch_delete_messages_request.h"
#include "google/gmail_api/draft.h"
#include "google/gmail_api/filter.h"
#include "google/gmail_api/forwarding_address.h"
#include "google/gmail_api/imap_settings.h"
#include "google/gmail_api/label.h"
#include "google/gmail_api/list_drafts_response.h"
#include "google/gmail_api/list_filters_response.h"
#include "google/gmail_api/list_forwarding_addresses_response.h"
#include "google/gmail_api/list_history_response.h"
#include "google/gmail_api/list_labels_response.h"
#include "google/gmail_api/list_messages_response.h"
#include "google/gmail_api/list_send_as_response.h"
#include "google/gmail_api/list_threads_response.h"
#include "google/gmail_api/message.h"
#include "google/gmail_api/message_part_body.h"
#include "google/gmail_api/modify_message_request.h"
#include "google/gmail_api/modify_thread_request.h"
#include "google/gmail_api/pop_settings.h"
#include "google/gmail_api/profile.h"
#include "google/gmail_api/send_as.h"
#include "google/gmail_api/thread.h"
#include "google/gmail_api/vacation_settings.h"
#include "google/gmail_api/watch_request.h"
#include "google/gmail_api/watch_response.h"


#include "googleapis/client/data/data_reader.h"
#include "googleapis/client/transport/http_request.h"
#include "googleapis/client/transport/http_transport.h"
#include "googleapis/client/util/uri_utils.h"
#include "googleapis/strings/strcat.h"

namespace google_gmail_api {
using namespace googleapis;
const char GmailService::googleapis_API_NAME[] = {"gmail"};

const char GmailService::googleapis_API_VERSION[] = {"v1"};

const char GmailService::googleapis_API_GENERATOR[] = {
  "google-apis-code-generator 1.5.1 / 0.1.4"};


const char GmailService::SCOPES::MAIL_GOOGLE_COM[] = {"https://mail.google.com/"};

const char GmailService::SCOPES::GMAIL_COMPOSE[] = {"https://www.googleapis.com/auth/gmail.compose"};

const char GmailService::SCOPES::GMAIL_INSERT[] = {"https://www.googleapis.com/auth/gmail.insert"};

const char GmailService::SCOPES::GMAIL_LABELS[] = {"https://www.googleapis.com/auth/gmail.labels"};

const char GmailService::SCOPES::GMAIL_MODIFY[] = {"https://www.googleapis.com/auth/gmail.modify"};

const char GmailService::SCOPES::GMAIL_READONLY[] = {"https://www.googleapis.com/auth/gmail.readonly"};

const char GmailService::SCOPES::GMAIL_SEND[] = {"https://www.googleapis.com/auth/gmail.send"};

const char GmailService::SCOPES::GMAIL_SETTINGS_BASIC[] = {"https://www.googleapis.com/auth/gmail.settings.basic"};

const char GmailService::SCOPES::GMAIL_SETTINGS_SHARING[] = {"https://www.googleapis.com/auth/gmail.settings.sharing"};
GmailServiceBaseRequest::GmailServiceBaseRequest(
      const client::ClientService* service,
      client::AuthorizationCredential* credential,
      client::HttpRequest::HttpMethod method,
      const StringPiece& uri_template)
    : client::ClientServiceRequest(
          service, credential, method, uri_template),
      alt_("json"),
      pretty_print_(true),
      _have_alt_(false),
      _have_fields_(false),
      _have_key_(false),
      _have_oauth_token_(false),
      _have_pretty_print_(false),
      _have_quota_user_(false),
      _have_user_ip_(false) {
}

GmailServiceBaseRequest::~GmailServiceBaseRequest() {
}

util::Status GmailServiceBaseRequest::AppendVariable(
    const StringPiece& variable_name,
    const client::UriTemplateConfig& config,
    string* target) {
  return client::StatusInvalidArgument(
      StrCat("Unknown url variable='", variable_name, "'"));
}

util::Status GmailServiceBaseRequest::AppendOptionalQueryParameters(
    string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_alt_) {
    StrAppend(target, sep, "alt=",
              client::CppValueToEscapedUrlValue(
                alt_));
    sep = "&";
  }
  if (_have_fields_) {
    StrAppend(target, sep, "fields=",
              client::CppValueToEscapedUrlValue(
                fields_));
    sep = "&";
  }
  if (_have_key_) {
    StrAppend(target, sep, "key=",
              client::CppValueToEscapedUrlValue(
                key_));
    sep = "&";
  }
  if (_have_oauth_token_) {
    StrAppend(target, sep, "oauth_token=",
              client::CppValueToEscapedUrlValue(
                oauth_token_));
    sep = "&";
  }
  if (_have_pretty_print_) {
    StrAppend(target, sep, "prettyPrint=",
              client::CppValueToEscapedUrlValue(
                pretty_print_));
    sep = "&";
  }
  if (_have_quota_user_) {
    StrAppend(target, sep, "quotaUser=",
              client::CppValueToEscapedUrlValue(
                quota_user_));
    sep = "&";
  }
  if (_have_user_ip_) {
    StrAppend(target, sep, "userIp=",
              client::CppValueToEscapedUrlValue(
                user_ip_));
    sep = "&";
  }
  return client::ClientServiceRequest
         ::AppendOptionalQueryParameters(target);
}


void GmailServiceBaseRequest::AddJsonContentToRequest(
    const client::JsonCppData *content) {
  client::HttpRequest* _http_request_ = mutable_http_request();
  _http_request_->set_content_type(
        client::HttpRequest::ContentType_JSON);
  _http_request_->set_content_reader(content->MakeJsonReader());
}



// Standard constructor.
UsersResource_GetProfileMethod::UsersResource_GetProfileMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/profile"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_GetProfileMethod::~UsersResource_GetProfileMethod() {
}


util::Status UsersResource_GetProfileMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_StopMethod::UsersResource_StopMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/stop"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_StopMethod::~UsersResource_StopMethod() {
}


util::Status UsersResource_StopMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_WatchMethod::UsersResource_WatchMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const WatchRequest& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/watch"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_WatchMethod::~UsersResource_WatchMethod() {
}


util::Status UsersResource_WatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// static
const client::MediaUploadSpec
UsersResource_DraftsResource_CreateMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/gmail/v1/users/{userId}/drafts", true);


// static
const client::MediaUploadSpec
UsersResource_DraftsResource_CreateMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/gmail/v1/users/{userId}/drafts", true);



// Deprecated constructor did not take media upload arguments.
UsersResource_DraftsResource_CreateMethod::UsersResource_DraftsResource_CreateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "{userId}/drafts"),
      user_id_(user_id.as_string()) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "{userId}/drafts")));
}
// Standard constructor.
UsersResource_DraftsResource_CreateMethod::UsersResource_DraftsResource_CreateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Draft* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/drafts"),
      user_id_(user_id.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{userId}/drafts"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
UsersResource_DraftsResource_CreateMethod::~UsersResource_DraftsResource_CreateMethod() {
}


util::Status UsersResource_DraftsResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_DraftsResource_DeleteMethod::UsersResource_DraftsResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/drafts/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_DraftsResource_DeleteMethod::~UsersResource_DraftsResource_DeleteMethod() {
}


util::Status UsersResource_DraftsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_DraftsResource_GetMethod::UsersResource_DraftsResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/drafts/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()),
      format_("full"),
      _have_format_(false) {
}

// Standard destructor.
UsersResource_DraftsResource_GetMethod::~UsersResource_DraftsResource_GetMethod() {
}

util::Status UsersResource_DraftsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_format_) {
    StrAppend(target, sep, "format=",
              client::CppValueToEscapedUrlValue(
                format_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_DraftsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_DraftsResource_ListMethod::UsersResource_DraftsResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/drafts"),
      user_id_(user_id.as_string()),
      include_spam_trash_(false),
      max_results_(100),
      _have_include_spam_trash_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_q_(false) {
}

// Standard destructor.
UsersResource_DraftsResource_ListMethod::~UsersResource_DraftsResource_ListMethod() {
}

util::Status UsersResource_DraftsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_spam_trash_) {
    StrAppend(target, sep, "includeSpamTrash=",
              client::CppValueToEscapedUrlValue(
                include_spam_trash_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_DraftsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
UsersResource_DraftsResource_SendMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/gmail/v1/users/{userId}/drafts/send", true);


// static
const client::MediaUploadSpec
UsersResource_DraftsResource_SendMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/gmail/v1/users/{userId}/drafts/send", true);



// Deprecated constructor did not take media upload arguments.
UsersResource_DraftsResource_SendMethod::UsersResource_DraftsResource_SendMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "{userId}/drafts/send"),
      user_id_(user_id.as_string()) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "{userId}/drafts/send")));
}
// Standard constructor.
UsersResource_DraftsResource_SendMethod::UsersResource_DraftsResource_SendMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Draft* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/drafts/send"),
      user_id_(user_id.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{userId}/drafts/send"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
UsersResource_DraftsResource_SendMethod::~UsersResource_DraftsResource_SendMethod() {
}


util::Status UsersResource_DraftsResource_SendMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
UsersResource_DraftsResource_UpdateMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/gmail/v1/users/{userId}/drafts/{id}", true);


// static
const client::MediaUploadSpec
UsersResource_DraftsResource_UpdateMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/gmail/v1/users/{userId}/drafts/{id}", true);



// Deprecated constructor did not take media upload arguments.
UsersResource_DraftsResource_UpdateMethod::UsersResource_DraftsResource_UpdateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::PUT,
      "{userId}/drafts/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "{userId}/drafts/{id}")));
}
// Standard constructor.
UsersResource_DraftsResource_UpdateMethod::UsersResource_DraftsResource_UpdateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const Draft* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/drafts/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{userId}/drafts/{id}"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
UsersResource_DraftsResource_UpdateMethod::~UsersResource_DraftsResource_UpdateMethod() {
}


util::Status UsersResource_DraftsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_HistoryResource_ListMethod::UsersResource_HistoryResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/history"),
      user_id_(user_id.as_string()),
      max_results_(100),
      _have_label_id_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_start_history_id_(false) {
}

// Standard destructor.
UsersResource_HistoryResource_ListMethod::~UsersResource_HistoryResource_ListMethod() {
}

util::Status UsersResource_HistoryResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_label_id_) {
    StrAppend(target, sep, "labelId=",
              client::CppValueToEscapedUrlValue(
                label_id_));
    sep = "&";
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_start_history_id_) {
    StrAppend(target, sep, "startHistoryId=",
              client::CppValueToEscapedUrlValue(
                start_history_id_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_HistoryResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_LabelsResource_CreateMethod::UsersResource_LabelsResource_CreateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Label& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/labels"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_LabelsResource_CreateMethod::~UsersResource_LabelsResource_CreateMethod() {
}


util::Status UsersResource_LabelsResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_LabelsResource_DeleteMethod::UsersResource_LabelsResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/labels/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_LabelsResource_DeleteMethod::~UsersResource_LabelsResource_DeleteMethod() {
}


util::Status UsersResource_LabelsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_LabelsResource_GetMethod::UsersResource_LabelsResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/labels/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_LabelsResource_GetMethod::~UsersResource_LabelsResource_GetMethod() {
}


util::Status UsersResource_LabelsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_LabelsResource_ListMethod::UsersResource_LabelsResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/labels"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_LabelsResource_ListMethod::~UsersResource_LabelsResource_ListMethod() {
}


util::Status UsersResource_LabelsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_LabelsResource_PatchMethod::UsersResource_LabelsResource_PatchMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const Label& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{userId}/labels/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_LabelsResource_PatchMethod::~UsersResource_LabelsResource_PatchMethod() {
}


util::Status UsersResource_LabelsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_LabelsResource_UpdateMethod::UsersResource_LabelsResource_UpdateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const Label& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/labels/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_LabelsResource_UpdateMethod::~UsersResource_LabelsResource_UpdateMethod() {
}


util::Status UsersResource_LabelsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_MessagesResource_BatchDeleteMethod::UsersResource_MessagesResource_BatchDeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const BatchDeleteMessagesRequest& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages/batchDelete"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_MessagesResource_BatchDeleteMethod::~UsersResource_MessagesResource_BatchDeleteMethod() {
}


util::Status UsersResource_MessagesResource_BatchDeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_MessagesResource_DeleteMethod::UsersResource_MessagesResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/messages/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_MessagesResource_DeleteMethod::~UsersResource_MessagesResource_DeleteMethod() {
}


util::Status UsersResource_MessagesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_MessagesResource_GetMethod::UsersResource_MessagesResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/messages/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()),
      format_("full"),
      _have_format_(false),
      _have_metadata_headers_(false) {
}

// Standard destructor.
UsersResource_MessagesResource_GetMethod::~UsersResource_MessagesResource_GetMethod() {
}

util::Status UsersResource_MessagesResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_format_) {
    StrAppend(target, sep, "format=",
              client::CppValueToEscapedUrlValue(
                format_));
    sep = "&";
  }
  if (_have_metadata_headers_) {
    if (!metadata_headers_.empty()) {
      target->append(sep);
      client::AppendIteratorToUrl(
        metadata_headers_.begin(), metadata_headers_.end(),
        "metadataHeaders", target);
      sep = "&";
    }
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_MessagesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
UsersResource_MessagesResource_ImportMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/gmail/v1/users/{userId}/messages/import", true);


// static
const client::MediaUploadSpec
UsersResource_MessagesResource_ImportMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/gmail/v1/users/{userId}/messages/import", true);



// Deprecated constructor did not take media upload arguments.
UsersResource_MessagesResource_ImportMethod::UsersResource_MessagesResource_ImportMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "{userId}/messages/import"),
      user_id_(user_id.as_string()),
      deleted_(false),
      internal_date_source_("dateHeader"),
      never_mark_spam_(false),
      process_for_calendar_(false),
      _have_deleted_(false),
      _have_internal_date_source_(false),
      _have_never_mark_spam_(false),
      _have_process_for_calendar_(false) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "{userId}/messages/import")));
}
// Standard constructor.
UsersResource_MessagesResource_ImportMethod::UsersResource_MessagesResource_ImportMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Message* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages/import"),
      user_id_(user_id.as_string()),
      deleted_(false),
      internal_date_source_("dateHeader"),
      never_mark_spam_(false),
      process_for_calendar_(false),
      _have_deleted_(false),
      _have_internal_date_source_(false),
      _have_never_mark_spam_(false),
      _have_process_for_calendar_(false) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{userId}/messages/import"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
UsersResource_MessagesResource_ImportMethod::~UsersResource_MessagesResource_ImportMethod() {
}

util::Status UsersResource_MessagesResource_ImportMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_deleted_) {
    StrAppend(target, sep, "deleted=",
              client::CppValueToEscapedUrlValue(
                deleted_));
    sep = "&";
  }
  if (_have_internal_date_source_) {
    StrAppend(target, sep, "internalDateSource=",
              client::CppValueToEscapedUrlValue(
                internal_date_source_));
    sep = "&";
  }
  if (_have_never_mark_spam_) {
    StrAppend(target, sep, "neverMarkSpam=",
              client::CppValueToEscapedUrlValue(
                never_mark_spam_));
    sep = "&";
  }
  if (_have_process_for_calendar_) {
    StrAppend(target, sep, "processForCalendar=",
              client::CppValueToEscapedUrlValue(
                process_for_calendar_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_MessagesResource_ImportMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
UsersResource_MessagesResource_InsertMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/gmail/v1/users/{userId}/messages", true);


// static
const client::MediaUploadSpec
UsersResource_MessagesResource_InsertMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/gmail/v1/users/{userId}/messages", true);



// Deprecated constructor did not take media upload arguments.
UsersResource_MessagesResource_InsertMethod::UsersResource_MessagesResource_InsertMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "{userId}/messages"),
      user_id_(user_id.as_string()),
      deleted_(false),
      internal_date_source_("receivedTime"),
      _have_deleted_(false),
      _have_internal_date_source_(false) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "{userId}/messages")));
}
// Standard constructor.
UsersResource_MessagesResource_InsertMethod::UsersResource_MessagesResource_InsertMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Message* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages"),
      user_id_(user_id.as_string()),
      deleted_(false),
      internal_date_source_("receivedTime"),
      _have_deleted_(false),
      _have_internal_date_source_(false) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{userId}/messages"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
UsersResource_MessagesResource_InsertMethod::~UsersResource_MessagesResource_InsertMethod() {
}

util::Status UsersResource_MessagesResource_InsertMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_deleted_) {
    StrAppend(target, sep, "deleted=",
              client::CppValueToEscapedUrlValue(
                deleted_));
    sep = "&";
  }
  if (_have_internal_date_source_) {
    StrAppend(target, sep, "internalDateSource=",
              client::CppValueToEscapedUrlValue(
                internal_date_source_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_MessagesResource_InsertMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_MessagesResource_ListMethod::UsersResource_MessagesResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/messages"),
      user_id_(user_id.as_string()),
      include_spam_trash_(false),
      max_results_(100),
      _have_include_spam_trash_(false),
      _have_label_ids_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_q_(false) {
}

// Standard destructor.
UsersResource_MessagesResource_ListMethod::~UsersResource_MessagesResource_ListMethod() {
}

util::Status UsersResource_MessagesResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_spam_trash_) {
    StrAppend(target, sep, "includeSpamTrash=",
              client::CppValueToEscapedUrlValue(
                include_spam_trash_));
    sep = "&";
  }
  if (_have_label_ids_) {
    if (!label_ids_.empty()) {
      target->append(sep);
      client::AppendIteratorToUrl(
        label_ids_.begin(), label_ids_.end(),
        "labelIds", target);
      sep = "&";
    }
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_MessagesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_MessagesResource_ModifyMethod::UsersResource_MessagesResource_ModifyMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const ModifyMessageRequest& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages/{id}/modify"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_MessagesResource_ModifyMethod::~UsersResource_MessagesResource_ModifyMethod() {
}


util::Status UsersResource_MessagesResource_ModifyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// static
const client::MediaUploadSpec
UsersResource_MessagesResource_SendMethod::SIMPLE_MEDIA_UPLOAD(
    "simple", "/upload/gmail/v1/users/{userId}/messages/send", true);


// static
const client::MediaUploadSpec
UsersResource_MessagesResource_SendMethod::RESUMABLE_MEDIA_UPLOAD(
    "resumable", "/resumable/upload/gmail/v1/users/{userId}/messages/send", true);



// Deprecated constructor did not take media upload arguments.
UsersResource_MessagesResource_SendMethod::UsersResource_MessagesResource_SendMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
      _service_, _credential_,
      client::HttpRequest::POST,
      "{userId}/messages/send"),
      user_id_(user_id.as_string()) {
  uploader_.reset(new client::MediaUploader(
      &SIMPLE_MEDIA_UPLOAD,
      _service_->url_root(),
      client::JoinPath(
          _service_->url_path(), "{userId}/messages/send")));
}
// Standard constructor.
UsersResource_MessagesResource_SendMethod::UsersResource_MessagesResource_SendMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Message* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages/send"),
      user_id_(user_id.as_string()) {
  if (_media_content_reader_) {
    client::MediaUploader* uploader =
        new client::MediaUploader(
            &SIMPLE_MEDIA_UPLOAD,
            _service_->url_root(),
            client::JoinPath(
                _service_->url_path(), "{userId}/messages/send"));
    if (_metadata_) {
      uploader->set_metadata(*_metadata_);
    }
    uploader->set_media_content_reader(
        _media_content_type_.as_string(), _media_content_reader_);
    ResetMediaUploader(uploader);
  } else {
    AddJsonContentToRequest(_metadata_);
  }
}

// Standard destructor.
UsersResource_MessagesResource_SendMethod::~UsersResource_MessagesResource_SendMethod() {
}


util::Status UsersResource_MessagesResource_SendMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_MessagesResource_TrashMethod::UsersResource_MessagesResource_TrashMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages/{id}/trash"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_MessagesResource_TrashMethod::~UsersResource_MessagesResource_TrashMethod() {
}


util::Status UsersResource_MessagesResource_TrashMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_MessagesResource_UntrashMethod::UsersResource_MessagesResource_UntrashMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/messages/{id}/untrash"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_MessagesResource_UntrashMethod::~UsersResource_MessagesResource_UntrashMethod() {
}


util::Status UsersResource_MessagesResource_UntrashMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
UsersResource_MessagesResource_AttachmentsResource_GetMethod::UsersResource_MessagesResource_AttachmentsResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& message_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/messages/{messageId}/attachments/{id}"),
      user_id_(user_id.as_string()),
      message_id_(message_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_MessagesResource_AttachmentsResource_GetMethod::~UsersResource_MessagesResource_AttachmentsResource_GetMethod() {
}


util::Status UsersResource_MessagesResource_AttachmentsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "messageId") {
    client::UriTemplate::AppendValue(
        message_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_SettingsResource_GetAutoForwardingMethod::UsersResource_SettingsResource_GetAutoForwardingMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/autoForwarding"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_GetAutoForwardingMethod::~UsersResource_SettingsResource_GetAutoForwardingMethod() {
}


util::Status UsersResource_SettingsResource_GetAutoForwardingMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_GetImapMethod::UsersResource_SettingsResource_GetImapMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/imap"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_GetImapMethod::~UsersResource_SettingsResource_GetImapMethod() {
}


util::Status UsersResource_SettingsResource_GetImapMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_GetPopMethod::UsersResource_SettingsResource_GetPopMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/pop"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_GetPopMethod::~UsersResource_SettingsResource_GetPopMethod() {
}


util::Status UsersResource_SettingsResource_GetPopMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_GetVacationMethod::UsersResource_SettingsResource_GetVacationMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/vacation"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_GetVacationMethod::~UsersResource_SettingsResource_GetVacationMethod() {
}


util::Status UsersResource_SettingsResource_GetVacationMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_UpdateAutoForwardingMethod::UsersResource_SettingsResource_UpdateAutoForwardingMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const AutoForwarding& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/settings/autoForwarding"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_UpdateAutoForwardingMethod::~UsersResource_SettingsResource_UpdateAutoForwardingMethod() {
}


util::Status UsersResource_SettingsResource_UpdateAutoForwardingMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_UpdateImapMethod::UsersResource_SettingsResource_UpdateImapMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const ImapSettings& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/settings/imap"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_UpdateImapMethod::~UsersResource_SettingsResource_UpdateImapMethod() {
}


util::Status UsersResource_SettingsResource_UpdateImapMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_UpdatePopMethod::UsersResource_SettingsResource_UpdatePopMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const PopSettings& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/settings/pop"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_UpdatePopMethod::~UsersResource_SettingsResource_UpdatePopMethod() {
}


util::Status UsersResource_SettingsResource_UpdatePopMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_UpdateVacationMethod::UsersResource_SettingsResource_UpdateVacationMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const VacationSettings& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/settings/vacation"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_UpdateVacationMethod::~UsersResource_SettingsResource_UpdateVacationMethod() {
}


util::Status UsersResource_SettingsResource_UpdateVacationMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}





// Standard constructor.
UsersResource_SettingsResource_FiltersResource_CreateMethod::UsersResource_SettingsResource_FiltersResource_CreateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Filter& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/settings/filters"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_FiltersResource_CreateMethod::~UsersResource_SettingsResource_FiltersResource_CreateMethod() {
}


util::Status UsersResource_SettingsResource_FiltersResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_FiltersResource_DeleteMethod::UsersResource_SettingsResource_FiltersResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/settings/filters/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_FiltersResource_DeleteMethod::~UsersResource_SettingsResource_FiltersResource_DeleteMethod() {
}


util::Status UsersResource_SettingsResource_FiltersResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_FiltersResource_GetMethod::UsersResource_SettingsResource_FiltersResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/filters/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_FiltersResource_GetMethod::~UsersResource_SettingsResource_FiltersResource_GetMethod() {
}


util::Status UsersResource_SettingsResource_FiltersResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_FiltersResource_ListMethod::UsersResource_SettingsResource_FiltersResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/filters"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_FiltersResource_ListMethod::~UsersResource_SettingsResource_FiltersResource_ListMethod() {
}


util::Status UsersResource_SettingsResource_FiltersResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod::UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const ForwardingAddress& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/settings/forwardingAddresses"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod::~UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod() {
}


util::Status UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod::UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& forwarding_email)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/settings/forwardingAddresses/{forwardingEmail}"),
      user_id_(user_id.as_string()),
      forwarding_email_(forwarding_email.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod::~UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod() {
}


util::Status UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingEmail") {
    client::UriTemplate::AppendValue(
        forwarding_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod::UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& forwarding_email)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/forwardingAddresses/{forwardingEmail}"),
      user_id_(user_id.as_string()),
      forwarding_email_(forwarding_email.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod::~UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod() {
}


util::Status UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "forwardingEmail") {
    client::UriTemplate::AppendValue(
        forwarding_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod::UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/forwardingAddresses"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod::~UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod() {
}


util::Status UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_SettingsResource_SendAsResource_CreateMethod::UsersResource_SettingsResource_SendAsResource_CreateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const SendAs& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/settings/sendAs"),
      user_id_(user_id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_CreateMethod::~UsersResource_SettingsResource_SendAsResource_CreateMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_CreateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_SendAsResource_DeleteMethod::UsersResource_SettingsResource_SendAsResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/settings/sendAs/{sendAsEmail}"),
      user_id_(user_id.as_string()),
      send_as_email_(send_as_email.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_DeleteMethod::~UsersResource_SettingsResource_SendAsResource_DeleteMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sendAsEmail") {
    client::UriTemplate::AppendValue(
        send_as_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_SendAsResource_GetMethod::UsersResource_SettingsResource_SendAsResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/sendAs/{sendAsEmail}"),
      user_id_(user_id.as_string()),
      send_as_email_(send_as_email.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_GetMethod::~UsersResource_SettingsResource_SendAsResource_GetMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sendAsEmail") {
    client::UriTemplate::AppendValue(
        send_as_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_SendAsResource_ListMethod::UsersResource_SettingsResource_SendAsResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/settings/sendAs"),
      user_id_(user_id.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_ListMethod::~UsersResource_SettingsResource_SendAsResource_ListMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_SendAsResource_PatchMethod::UsersResource_SettingsResource_SendAsResource_PatchMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email, const SendAs& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PATCH,
        "{userId}/settings/sendAs/{sendAsEmail}"),
      user_id_(user_id.as_string()),
      send_as_email_(send_as_email.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_PatchMethod::~UsersResource_SettingsResource_SendAsResource_PatchMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_PatchMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sendAsEmail") {
    client::UriTemplate::AppendValue(
        send_as_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_SendAsResource_UpdateMethod::UsersResource_SettingsResource_SendAsResource_UpdateMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email, const SendAs& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::PUT,
        "{userId}/settings/sendAs/{sendAsEmail}"),
      user_id_(user_id.as_string()),
      send_as_email_(send_as_email.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_UpdateMethod::~UsersResource_SettingsResource_SendAsResource_UpdateMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_UpdateMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sendAsEmail") {
    client::UriTemplate::AppendValue(
        send_as_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_SettingsResource_SendAsResource_VerifyMethod::UsersResource_SettingsResource_SendAsResource_VerifyMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/settings/sendAs/{sendAsEmail}/verify"),
      user_id_(user_id.as_string()),
      send_as_email_(send_as_email.as_string()) {
}

// Standard destructor.
UsersResource_SettingsResource_SendAsResource_VerifyMethod::~UsersResource_SettingsResource_SendAsResource_VerifyMethod() {
}


util::Status UsersResource_SettingsResource_SendAsResource_VerifyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "sendAsEmail") {
    client::UriTemplate::AppendValue(
        send_as_email_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



// Standard constructor.
UsersResource_ThreadsResource_DeleteMethod::UsersResource_ThreadsResource_DeleteMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::DELETE,
        "{userId}/threads/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_ThreadsResource_DeleteMethod::~UsersResource_ThreadsResource_DeleteMethod() {
}


util::Status UsersResource_ThreadsResource_DeleteMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_ThreadsResource_GetMethod::UsersResource_ThreadsResource_GetMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/threads/{id}"),
      user_id_(user_id.as_string()),
      id_(id.as_string()),
      format_("full"),
      _have_format_(false),
      _have_metadata_headers_(false) {
}

// Standard destructor.
UsersResource_ThreadsResource_GetMethod::~UsersResource_ThreadsResource_GetMethod() {
}

util::Status UsersResource_ThreadsResource_GetMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_format_) {
    StrAppend(target, sep, "format=",
              client::CppValueToEscapedUrlValue(
                format_));
    sep = "&";
  }
  if (_have_metadata_headers_) {
    if (!metadata_headers_.empty()) {
      target->append(sep);
      client::AppendIteratorToUrl(
        metadata_headers_.begin(), metadata_headers_.end(),
        "metadataHeaders", target);
      sep = "&";
    }
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_ThreadsResource_GetMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_ThreadsResource_ListMethod::UsersResource_ThreadsResource_ListMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::GET,
        "{userId}/threads"),
      user_id_(user_id.as_string()),
      include_spam_trash_(false),
      max_results_(100),
      _have_include_spam_trash_(false),
      _have_label_ids_(false),
      _have_max_results_(false),
      _have_page_token_(false),
      _have_q_(false) {
}

// Standard destructor.
UsersResource_ThreadsResource_ListMethod::~UsersResource_ThreadsResource_ListMethod() {
}

util::Status UsersResource_ThreadsResource_ListMethod::AppendOptionalQueryParameters(string* target) {
  const char* sep = (target->find('?') == string::npos) ? "?" : "&";
  if (_have_include_spam_trash_) {
    StrAppend(target, sep, "includeSpamTrash=",
              client::CppValueToEscapedUrlValue(
                include_spam_trash_));
    sep = "&";
  }
  if (_have_label_ids_) {
    if (!label_ids_.empty()) {
      target->append(sep);
      client::AppendIteratorToUrl(
        label_ids_.begin(), label_ids_.end(),
        "labelIds", target);
      sep = "&";
    }
  }
  if (_have_max_results_) {
    StrAppend(target, sep, "maxResults=",
              client::CppValueToEscapedUrlValue(
                max_results_));
    sep = "&";
  }
  if (_have_page_token_) {
    StrAppend(target, sep, "pageToken=",
              client::CppValueToEscapedUrlValue(
                page_token_));
    sep = "&";
  }
  if (_have_q_) {
    StrAppend(target, sep, "q=",
              client::CppValueToEscapedUrlValue(
                q_));
    sep = "&";
  }
  return GmailServiceBaseRequest::AppendOptionalQueryParameters(target);
}
util::Status UsersResource_ThreadsResource_ListMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_ThreadsResource_ModifyMethod::UsersResource_ThreadsResource_ModifyMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const ModifyThreadRequest& __request_content__)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/threads/{id}/modify"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
  AddJsonContentToRequest(&__request_content__);
}

// Standard destructor.
UsersResource_ThreadsResource_ModifyMethod::~UsersResource_ThreadsResource_ModifyMethod() {
}


util::Status UsersResource_ThreadsResource_ModifyMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_ThreadsResource_TrashMethod::UsersResource_ThreadsResource_TrashMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/threads/{id}/trash"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_ThreadsResource_TrashMethod::~UsersResource_ThreadsResource_TrashMethod() {
}


util::Status UsersResource_ThreadsResource_TrashMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}


// Standard constructor.
UsersResource_ThreadsResource_UntrashMethod::UsersResource_ThreadsResource_UntrashMethod(
    const GmailService* _service_, client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id)
    : GmailServiceBaseRequest(
        _service_, _credential_,
        client::HttpRequest::POST,
        "{userId}/threads/{id}/untrash"),
      user_id_(user_id.as_string()),
      id_(id.as_string()) {
}

// Standard destructor.
UsersResource_ThreadsResource_UntrashMethod::~UsersResource_ThreadsResource_UntrashMethod() {
}


util::Status UsersResource_ThreadsResource_UntrashMethod::AppendVariable(
        const StringPiece& variable_name,
        const client::UriTemplateConfig& config,
        string* target) {
  if (variable_name == "userId") {
    client::UriTemplate::AppendValue(
        user_id_, config, target);
    return client::StatusOk();
  }
  if (variable_name == "id") {
    client::UriTemplate::AppendValue(
        id_, config, target);
    return client::StatusOk();
  }
  return GmailServiceBaseRequest::AppendVariable(
      variable_name, config, target);
}



GmailService::GmailService(client::HttpTransport* transport)
  : ClientService("https://www.googleapis.com/", "gmail/v1/users/", transport), users_(this) {
}

GmailService::~GmailService() {
}


GmailService::UsersResource::UsersResource(GmailService* service)
  : service_(service), drafts_(service), history_(service), labels_(service), messages_(service), settings_(service), threads_(service) {
}



UsersResource_GetProfileMethod* GmailService::UsersResource::NewGetProfileMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_GetProfileMethod(service_, _credential_, user_id);
}


UsersResource_StopMethod* GmailService::UsersResource::NewStopMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_StopMethod(service_, _credential_, user_id);
}


UsersResource_WatchMethod* GmailService::UsersResource::NewWatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const WatchRequest& __request_content__) const {
  return new UsersResource_WatchMethod(service_, _credential_, user_id, __request_content__);
}



GmailService::UsersResource::DraftsResource::DraftsResource(GmailService* service)
  : service_(service) {
}




// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
UsersResource_DraftsResource_CreateMethod* GmailService::UsersResource::DraftsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_DraftsResource_CreateMethod(service_, _credential_, user_id);
}

UsersResource_DraftsResource_CreateMethod* GmailService::UsersResource::DraftsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Draft* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new UsersResource_DraftsResource_CreateMethod(service_, _credential_, user_id, _metadata_, _media_content_type_, _media_content_reader_);
}


UsersResource_DraftsResource_DeleteMethod* GmailService::UsersResource::DraftsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_DraftsResource_DeleteMethod(service_, _credential_, user_id, id);
}


UsersResource_DraftsResource_GetMethod* GmailService::UsersResource::DraftsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_DraftsResource_GetMethod(service_, _credential_, user_id, id);
}


UsersResource_DraftsResource_ListMethod* GmailService::UsersResource::DraftsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_DraftsResource_ListMethod(service_, _credential_, user_id);
}


UsersResource_DraftsResource_ListMethodPager* GmailService::UsersResource::DraftsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new client::EncapsulatedServiceRequestPager<UsersResource_DraftsResource_ListMethod, ListDraftsResponse>(new UsersResource_DraftsResource_ListMethod(service_, _credential_, user_id));
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
UsersResource_DraftsResource_SendMethod* GmailService::UsersResource::DraftsResource::NewSendMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_DraftsResource_SendMethod(service_, _credential_, user_id);
}

UsersResource_DraftsResource_SendMethod* GmailService::UsersResource::DraftsResource::NewSendMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Draft* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new UsersResource_DraftsResource_SendMethod(service_, _credential_, user_id, _metadata_, _media_content_type_, _media_content_reader_);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
UsersResource_DraftsResource_UpdateMethod* GmailService::UsersResource::DraftsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_DraftsResource_UpdateMethod(service_, _credential_, user_id, id);
}

UsersResource_DraftsResource_UpdateMethod* GmailService::UsersResource::DraftsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const Draft* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new UsersResource_DraftsResource_UpdateMethod(service_, _credential_, user_id, id, _metadata_, _media_content_type_, _media_content_reader_);
}

GmailService::UsersResource::HistoryResource::HistoryResource(GmailService* service)
  : service_(service) {
}



UsersResource_HistoryResource_ListMethod* GmailService::UsersResource::HistoryResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_HistoryResource_ListMethod(service_, _credential_, user_id);
}


UsersResource_HistoryResource_ListMethodPager* GmailService::UsersResource::HistoryResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new client::EncapsulatedServiceRequestPager<UsersResource_HistoryResource_ListMethod, ListHistoryResponse>(new UsersResource_HistoryResource_ListMethod(service_, _credential_, user_id));
}

GmailService::UsersResource::LabelsResource::LabelsResource(GmailService* service)
  : service_(service) {
}



UsersResource_LabelsResource_CreateMethod* GmailService::UsersResource::LabelsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Label& __request_content__) const {
  return new UsersResource_LabelsResource_CreateMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_LabelsResource_DeleteMethod* GmailService::UsersResource::LabelsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_LabelsResource_DeleteMethod(service_, _credential_, user_id, id);
}


UsersResource_LabelsResource_GetMethod* GmailService::UsersResource::LabelsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_LabelsResource_GetMethod(service_, _credential_, user_id, id);
}


UsersResource_LabelsResource_ListMethod* GmailService::UsersResource::LabelsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_LabelsResource_ListMethod(service_, _credential_, user_id);
}


UsersResource_LabelsResource_PatchMethod* GmailService::UsersResource::LabelsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const Label& __request_content__) const {
  return new UsersResource_LabelsResource_PatchMethod(service_, _credential_, user_id, id, __request_content__);
}


UsersResource_LabelsResource_UpdateMethod* GmailService::UsersResource::LabelsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const Label& __request_content__) const {
  return new UsersResource_LabelsResource_UpdateMethod(service_, _credential_, user_id, id, __request_content__);
}

GmailService::UsersResource::MessagesResource::MessagesResource(GmailService* service)
  : service_(service), attachments_(service) {
}



UsersResource_MessagesResource_BatchDeleteMethod* GmailService::UsersResource::MessagesResource::NewBatchDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const BatchDeleteMessagesRequest& __request_content__) const {
  return new UsersResource_MessagesResource_BatchDeleteMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_MessagesResource_DeleteMethod* GmailService::UsersResource::MessagesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_MessagesResource_DeleteMethod(service_, _credential_, user_id, id);
}


UsersResource_MessagesResource_GetMethod* GmailService::UsersResource::MessagesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_MessagesResource_GetMethod(service_, _credential_, user_id, id);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
UsersResource_MessagesResource_ImportMethod* GmailService::UsersResource::MessagesResource::NewImportMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_MessagesResource_ImportMethod(service_, _credential_, user_id);
}

UsersResource_MessagesResource_ImportMethod* GmailService::UsersResource::MessagesResource::NewImportMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Message* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new UsersResource_MessagesResource_ImportMethod(service_, _credential_, user_id, _metadata_, _media_content_type_, _media_content_reader_);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
UsersResource_MessagesResource_InsertMethod* GmailService::UsersResource::MessagesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_MessagesResource_InsertMethod(service_, _credential_, user_id);
}

UsersResource_MessagesResource_InsertMethod* GmailService::UsersResource::MessagesResource::NewInsertMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Message* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new UsersResource_MessagesResource_InsertMethod(service_, _credential_, user_id, _metadata_, _media_content_type_, _media_content_reader_);
}


UsersResource_MessagesResource_ListMethod* GmailService::UsersResource::MessagesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_MessagesResource_ListMethod(service_, _credential_, user_id);
}


UsersResource_MessagesResource_ListMethodPager* GmailService::UsersResource::MessagesResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new client::EncapsulatedServiceRequestPager<UsersResource_MessagesResource_ListMethod, ListMessagesResponse>(new UsersResource_MessagesResource_ListMethod(service_, _credential_, user_id));
}


UsersResource_MessagesResource_ModifyMethod* GmailService::UsersResource::MessagesResource::NewModifyMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const ModifyMessageRequest& __request_content__) const {
  return new UsersResource_MessagesResource_ModifyMethod(service_, _credential_, user_id, id, __request_content__);
}



// This factory method is deprecated in favor of the newer variation that
// also takes the media upload parameters.
UsersResource_MessagesResource_SendMethod* GmailService::UsersResource::MessagesResource::NewSendMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_MessagesResource_SendMethod(service_, _credential_, user_id);
}

UsersResource_MessagesResource_SendMethod* GmailService::UsersResource::MessagesResource::NewSendMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Message* _metadata_, const StringPiece& _media_content_type_, client::DataReader* _media_content_reader_) const {
  return new UsersResource_MessagesResource_SendMethod(service_, _credential_, user_id, _metadata_, _media_content_type_, _media_content_reader_);
}


UsersResource_MessagesResource_TrashMethod* GmailService::UsersResource::MessagesResource::NewTrashMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_MessagesResource_TrashMethod(service_, _credential_, user_id, id);
}


UsersResource_MessagesResource_UntrashMethod* GmailService::UsersResource::MessagesResource::NewUntrashMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_MessagesResource_UntrashMethod(service_, _credential_, user_id, id);
}



GmailService::UsersResource::MessagesResource::AttachmentsResource::AttachmentsResource(GmailService* service)
  : service_(service) {
}



UsersResource_MessagesResource_AttachmentsResource_GetMethod* GmailService::UsersResource::MessagesResource::AttachmentsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& message_id, const StringPiece& id) const {
  return new UsersResource_MessagesResource_AttachmentsResource_GetMethod(service_, _credential_, user_id, message_id, id);
}

GmailService::UsersResource::SettingsResource::SettingsResource(GmailService* service)
  : service_(service), filters_(service), forwarding_addresses_(service), send_as_(service) {
}



UsersResource_SettingsResource_GetAutoForwardingMethod* GmailService::UsersResource::SettingsResource::NewGetAutoForwardingMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_GetAutoForwardingMethod(service_, _credential_, user_id);
}


UsersResource_SettingsResource_GetImapMethod* GmailService::UsersResource::SettingsResource::NewGetImapMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_GetImapMethod(service_, _credential_, user_id);
}


UsersResource_SettingsResource_GetPopMethod* GmailService::UsersResource::SettingsResource::NewGetPopMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_GetPopMethod(service_, _credential_, user_id);
}


UsersResource_SettingsResource_GetVacationMethod* GmailService::UsersResource::SettingsResource::NewGetVacationMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_GetVacationMethod(service_, _credential_, user_id);
}


UsersResource_SettingsResource_UpdateAutoForwardingMethod* GmailService::UsersResource::SettingsResource::NewUpdateAutoForwardingMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const AutoForwarding& __request_content__) const {
  return new UsersResource_SettingsResource_UpdateAutoForwardingMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_SettingsResource_UpdateImapMethod* GmailService::UsersResource::SettingsResource::NewUpdateImapMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const ImapSettings& __request_content__) const {
  return new UsersResource_SettingsResource_UpdateImapMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_SettingsResource_UpdatePopMethod* GmailService::UsersResource::SettingsResource::NewUpdatePopMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const PopSettings& __request_content__) const {
  return new UsersResource_SettingsResource_UpdatePopMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_SettingsResource_UpdateVacationMethod* GmailService::UsersResource::SettingsResource::NewUpdateVacationMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const VacationSettings& __request_content__) const {
  return new UsersResource_SettingsResource_UpdateVacationMethod(service_, _credential_, user_id, __request_content__);
}



GmailService::UsersResource::SettingsResource::FiltersResource::FiltersResource(GmailService* service)
  : service_(service) {
}



UsersResource_SettingsResource_FiltersResource_CreateMethod* GmailService::UsersResource::SettingsResource::FiltersResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const Filter& __request_content__) const {
  return new UsersResource_SettingsResource_FiltersResource_CreateMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_SettingsResource_FiltersResource_DeleteMethod* GmailService::UsersResource::SettingsResource::FiltersResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_SettingsResource_FiltersResource_DeleteMethod(service_, _credential_, user_id, id);
}


UsersResource_SettingsResource_FiltersResource_GetMethod* GmailService::UsersResource::SettingsResource::FiltersResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_SettingsResource_FiltersResource_GetMethod(service_, _credential_, user_id, id);
}


UsersResource_SettingsResource_FiltersResource_ListMethod* GmailService::UsersResource::SettingsResource::FiltersResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_FiltersResource_ListMethod(service_, _credential_, user_id);
}

GmailService::UsersResource::SettingsResource::ForwardingAddressesResource::ForwardingAddressesResource(GmailService* service)
  : service_(service) {
}



UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod* GmailService::UsersResource::SettingsResource::ForwardingAddressesResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const ForwardingAddress& __request_content__) const {
  return new UsersResource_SettingsResource_ForwardingAddressesResource_CreateMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod* GmailService::UsersResource::SettingsResource::ForwardingAddressesResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& forwarding_email) const {
  return new UsersResource_SettingsResource_ForwardingAddressesResource_DeleteMethod(service_, _credential_, user_id, forwarding_email);
}


UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod* GmailService::UsersResource::SettingsResource::ForwardingAddressesResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& forwarding_email) const {
  return new UsersResource_SettingsResource_ForwardingAddressesResource_GetMethod(service_, _credential_, user_id, forwarding_email);
}


UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod* GmailService::UsersResource::SettingsResource::ForwardingAddressesResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_ForwardingAddressesResource_ListMethod(service_, _credential_, user_id);
}

GmailService::UsersResource::SettingsResource::SendAsResource::SendAsResource(GmailService* service)
  : service_(service) {
}



UsersResource_SettingsResource_SendAsResource_CreateMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewCreateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const SendAs& __request_content__) const {
  return new UsersResource_SettingsResource_SendAsResource_CreateMethod(service_, _credential_, user_id, __request_content__);
}


UsersResource_SettingsResource_SendAsResource_DeleteMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email) const {
  return new UsersResource_SettingsResource_SendAsResource_DeleteMethod(service_, _credential_, user_id, send_as_email);
}


UsersResource_SettingsResource_SendAsResource_GetMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email) const {
  return new UsersResource_SettingsResource_SendAsResource_GetMethod(service_, _credential_, user_id, send_as_email);
}


UsersResource_SettingsResource_SendAsResource_ListMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_SettingsResource_SendAsResource_ListMethod(service_, _credential_, user_id);
}


UsersResource_SettingsResource_SendAsResource_PatchMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewPatchMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email, const SendAs& __request_content__) const {
  return new UsersResource_SettingsResource_SendAsResource_PatchMethod(service_, _credential_, user_id, send_as_email, __request_content__);
}


UsersResource_SettingsResource_SendAsResource_UpdateMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewUpdateMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email, const SendAs& __request_content__) const {
  return new UsersResource_SettingsResource_SendAsResource_UpdateMethod(service_, _credential_, user_id, send_as_email, __request_content__);
}


UsersResource_SettingsResource_SendAsResource_VerifyMethod* GmailService::UsersResource::SettingsResource::SendAsResource::NewVerifyMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& send_as_email) const {
  return new UsersResource_SettingsResource_SendAsResource_VerifyMethod(service_, _credential_, user_id, send_as_email);
}

GmailService::UsersResource::ThreadsResource::ThreadsResource(GmailService* service)
  : service_(service) {
}



UsersResource_ThreadsResource_DeleteMethod* GmailService::UsersResource::ThreadsResource::NewDeleteMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_ThreadsResource_DeleteMethod(service_, _credential_, user_id, id);
}


UsersResource_ThreadsResource_GetMethod* GmailService::UsersResource::ThreadsResource::NewGetMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_ThreadsResource_GetMethod(service_, _credential_, user_id, id);
}


UsersResource_ThreadsResource_ListMethod* GmailService::UsersResource::ThreadsResource::NewListMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new UsersResource_ThreadsResource_ListMethod(service_, _credential_, user_id);
}


UsersResource_ThreadsResource_ListMethodPager* GmailService::UsersResource::ThreadsResource::NewListMethodPager(client::AuthorizationCredential* _credential_, const StringPiece& user_id) const {
  return new client::EncapsulatedServiceRequestPager<UsersResource_ThreadsResource_ListMethod, ListThreadsResponse>(new UsersResource_ThreadsResource_ListMethod(service_, _credential_, user_id));
}


UsersResource_ThreadsResource_ModifyMethod* GmailService::UsersResource::ThreadsResource::NewModifyMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id, const ModifyThreadRequest& __request_content__) const {
  return new UsersResource_ThreadsResource_ModifyMethod(service_, _credential_, user_id, id, __request_content__);
}


UsersResource_ThreadsResource_TrashMethod* GmailService::UsersResource::ThreadsResource::NewTrashMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_ThreadsResource_TrashMethod(service_, _credential_, user_id, id);
}


UsersResource_ThreadsResource_UntrashMethod* GmailService::UsersResource::ThreadsResource::NewUntrashMethod(client::AuthorizationCredential* _credential_, const StringPiece& user_id, const StringPiece& id) const {
  return new UsersResource_ThreadsResource_UntrashMethod(service_, _credential_, user_id, id);
}
}  // namespace google_gmail_api
